Getting API URLs from sitemap...
Checking 202 URLs for API reference pages...
Found 109 API reference pages
Processing first 4 APIs for testing
Found 109 API sections in llms-full.txt
Scraping https://developers.glean.com/api/client-api/activity/activity...
HREESUMMARY <summary><h3 class="openapi-markdown__details-summary-header-body">Body<strong class="openapi-schema__required">required</strong></h3></summary>
HREESUMMARY <summary id="request-events"><span class="openapi-schema__container"><strong class="openapi-schema__property">events</strong><span class="openapi-schema__name"> ActivityEvent[]</span><span class="openapi-schema__divider"></span><span class="openapi-schema__required">required</span></span></summary>
HREESUMMARY <summary id="request-events-params"><span class="openapi-schema__container"><strong class="openapi-schema__property">params</strong><span class="openapi-schema__name"> ActivityEventParams</span></span></summary>
HERESCHEMA {'events': {'type': 'ActivityEvent[]', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': True, 'is_array': True, 'properties': {'id': {'type': 'string', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': False}, 'action': {'type': 'string', 'description': "The type of activity this represents.\n\nVIEW: Represents a visit to the givenurl.\nEDIT: Represents an edit of the document represented by theurl.\nSEARCH: Represents a search performed at the givenurl.\nCOMMENT: Represents a comment on the document represented by theurl.\nCRAWL: Represents an explicit request to index the givenurlalong with associated attributes in this payload.\nHISTORICAL_SEARCH: Represents a search performed at the givenurlas indicated by the user's history.\nHISTORICAL_VIEW: Represents a visit to the givenurlas indicated by the user's history.\n\nPossible values: `VIEW`, `EDIT`, `SEARCH`, `COMMENT`, `CRAWL`, `HISTORICAL_SEARCH`, `HISTORICAL_VIEW`", 'required': True}, 'params': {'type': 'ActivityEventParams', 'description': 'The HTML content of the page body.', 'required': False, 'is_array': False, 'properties': {'bodyContent': {'type': 'string', 'description': 'The HTML content of the page body.', 'required': False}, 'datasourceInstance': {'type': 'string', 'description': 'The full datasource instance name inferred from the URL of the event', 'required': False}, 'datasource': {'type': 'string', 'description': 'The datasource without the instance inferred from the URL of the event', 'required': False}, 'instanceOnlyName': {'type': 'string', 'description': 'The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event', 'required': False}, 'duration': {'type': 'integer', 'description': 'Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.', 'required': False}, 'query': {'type': 'string', 'description': "The user's search query associated with a SEARCH.", 'required': False}, 'referrer': {'type': 'string', 'description': 'The referring URL of the VIEW or SEARCH.', 'required': False}, 'title': {'type': 'string', 'description': 'The page title associated with the URL of the event', 'required': False}, 'truncated': {'type': 'boolean', 'description': 'Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when aVIEWis finished.', 'required': False}}}, 'timestamp': {'type': 'string<date-time>', 'description': 'The ISO 8601 timestamp when the activity began.', 'required': True}, 'url': {'type': 'string', 'description': 'The URL of the activity.', 'required': True}}}}
HEREOUTER None
HERESCHEMA {}
HEREREQUEST {'events': {'type': 'ActivityEvent[]', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': True, 'is_array': True, 'properties': {'id': {'type': 'string', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': False}, 'action': {'type': 'string', 'description': "The type of activity this represents.\n\nVIEW: Represents a visit to the givenurl.\nEDIT: Represents an edit of the document represented by theurl.\nSEARCH: Represents a search performed at the givenurl.\nCOMMENT: Represents a comment on the document represented by theurl.\nCRAWL: Represents an explicit request to index the givenurlalong with associated attributes in this payload.\nHISTORICAL_SEARCH: Represents a search performed at the givenurlas indicated by the user's history.\nHISTORICAL_VIEW: Represents a visit to the givenurlas indicated by the user's history.\n\nPossible values: `VIEW`, `EDIT`, `SEARCH`, `COMMENT`, `CRAWL`, `HISTORICAL_SEARCH`, `HISTORICAL_VIEW`", 'required': True}, 'params': {'type': 'ActivityEventParams', 'description': 'The HTML content of the page body.', 'required': False, 'is_array': False, 'properties': {'bodyContent': {'type': 'string', 'description': 'The HTML content of the page body.', 'required': False}, 'datasourceInstance': {'type': 'string', 'description': 'The full datasource instance name inferred from the URL of the event', 'required': False}, 'datasource': {'type': 'string', 'description': 'The datasource without the instance inferred from the URL of the event', 'required': False}, 'instanceOnlyName': {'type': 'string', 'description': 'The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event', 'required': False}, 'duration': {'type': 'integer', 'description': 'Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.', 'required': False}, 'query': {'type': 'string', 'description': "The user's search query associated with a SEARCH.", 'required': False}, 'referrer': {'type': 'string', 'description': 'The referring URL of the VIEW or SEARCH.', 'required': False}, 'title': {'type': 'string', 'description': 'The page title associated with the URL of the event', 'required': False}, 'truncated': {'type': 'boolean', 'description': 'Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when aVIEWis finished.', 'required': False}}}, 'timestamp': {'type': 'string<date-time>', 'description': 'The ISO 8601 timestamp when the activity began.', 'required': True}, 'url': {'type': 'string', 'description': 'The URL of the activity.', 'required': True}}}}
HERERESPONSE {}
HERE {'title': 'Report document activity', 'url': 'https://developers.glean.com/api/client-api/activity/activity', 'authentication': 'Authorization: http', 'request_schema': {'events': {'type': 'ActivityEvent[]', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': True, 'is_array': True, 'properties': {'id': {'type': 'string', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': False}, 'action': {'type': 'string', 'description': "The type of activity this represents.\n\nVIEW: Represents a visit to the givenurl.\nEDIT: Represents an edit of the document represented by theurl.\nSEARCH: Represents a search performed at the givenurl.\nCOMMENT: Represents a comment on the document represented by theurl.\nCRAWL: Represents an explicit request to index the givenurlalong with associated attributes in this payload.\nHISTORICAL_SEARCH: Represents a search performed at the givenurlas indicated by the user's history.\nHISTORICAL_VIEW: Represents a visit to the givenurlas indicated by the user's history.\n\nPossible values: `VIEW`, `EDIT`, `SEARCH`, `COMMENT`, `CRAWL`, `HISTORICAL_SEARCH`, `HISTORICAL_VIEW`", 'required': True}, 'params': {'type': 'ActivityEventParams', 'description': 'The HTML content of the page body.', 'required': False, 'is_array': False, 'properties': {'bodyContent': {'type': 'string', 'description': 'The HTML content of the page body.', 'required': False}, 'datasourceInstance': {'type': 'string', 'description': 'The full datasource instance name inferred from the URL of the event', 'required': False}, 'datasource': {'type': 'string', 'description': 'The datasource without the instance inferred from the URL of the event', 'required': False}, 'instanceOnlyName': {'type': 'string', 'description': 'The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event', 'required': False}, 'duration': {'type': 'integer', 'description': 'Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.', 'required': False}, 'query': {'type': 'string', 'description': "The user's search query associated with a SEARCH.", 'required': False}, 'referrer': {'type': 'string', 'description': 'The referring URL of the VIEW or SEARCH.', 'required': False}, 'title': {'type': 'string', 'description': 'The page title associated with the URL of the event', 'required': False}, 'truncated': {'type': 'boolean', 'description': 'Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when aVIEWis finished.', 'required': False}}}, 'timestamp': {'type': 'string<date-time>', 'description': 'The ISO 8601 timestamp when the activity began.', 'required': True}, 'url': {'type': 'string', 'description': 'The URL of the activity.', 'required': True}}}}, 'response_schema': {}, 'request_mime_type': 'application/json', 'response_mime_type': '', 'python_code_sample': 'from glean.api_client import Glean, models\nfrom glean.api_client.utils import parse_datetime\nimport os\nwith Glean(\n    api_token=os.getenv("GLEAN_API_TOKEN", ""),\n    instance=os.getenv("GLEAN_INSTANCE", ""),\n) as glean:\n    glean.client.activity.report(events=[\n        {\n            "action": models.ActivityEventAction.HISTORICAL_VIEW,\n            "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),\n            "url": "https://example.com/",\n        },\n        {\n            "action": models.ActivityEventAction.SEARCH,\n            "params": {\n                "query": "query",\n            },\n            "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),\n            "url": "https://example.com/search?q=query",\n        },\n        {\n            "action": models.ActivityEventAction.VIEW,\n            "params": {\n                "duration": 20,\n                "referrer": "https://example.com/document",\n            },\n            "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),\n            "url": "https://example.com/",\n        },\n    ])\n    # Use the SDK ...', 'go_code_sample': 'package main\nimport(\n\t"context"\n\t"os"\n\tapiclientgo "github.com/gleanwork/api-client-go"\n\t"github.com/gleanwork/api-client-go/models/components"\n\t"github.com/gleanwork/api-client-go/types"\n\t"log"\n)\nfunc main() {\n    ctx := context.Background()\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv("GLEAN_API_TOKEN")),\n        apiclientgo.WithInstance(os.Getenv("GLEAN_INSTANCE")),\n    )\n    res, err := s.Client.Activity.Report(ctx, components.Activity{\n        Events: []components.ActivityEvent{\n            components.ActivityEvent{\n                Action: components.ActivityEventActionHistoricalView,\n                Timestamp: types.MustTimeFromString("2000-01-23T04:56:07.000Z"),\n                URL: "https://example.com/",\n            },\n            components.ActivityEvent{\n                Action: components.ActivityEventActionSearch,\n                Params: &components.ActivityEventParams{\n                    Query: apiclientgo.String("query"),\n                },\n                Timestamp: types.MustTimeFromString("2000-01-23T04:56:07.000Z"),\n                URL: "https://example.com/search?q=query",\n            },\n            components.ActivityEvent{\n                Action: components.ActivityEventActionView,\n                Params: &components.ActivityEventParams{\n                    Duration: apiclientgo.Int64(20),\n                    Referrer: apiclientgo.String("https://example.com/document"),\n                },\n                Timestamp: types.MustTimeFromString("2000-01-23T04:56:07.000Z"),\n                URL: "https://example.com/",\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}', 'java_code_sample': 'package hello.world;\nimport java.lang.Exception;\nimport java.time.OffsetDateTime;\nimport java.util.List;\nimport org.openapis.openapi.Glean;\nimport org.openapis.openapi.models.components.*;\nimport org.openapis.openapi.models.operations.ActivityResponse;\npublic class Application {\n    public static void main(String[] args) throws Exception {\n        Glean sdk = Glean.builder()\n                .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))\n            .build();\n        Activity req = Activity.builder()\n                .events(List.of(\n                    ActivityEvent.builder()\n                        .action(ActivityEventAction.HISTORICAL_VIEW)\n                        .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))\n                        .url("https://example.com/")\n                        .build(),\n                    ActivityEvent.builder()\n                        .action(ActivityEventAction.SEARCH)\n                        .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))\n                        .url("https://example.com/search?q=query")\n                        .params(ActivityEventParams.builder()\n                            .query("query")\n                            .build())\n                        .build(),\n                    ActivityEvent.builder()\n                        .action(ActivityEventAction.VIEW)\n                        .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))\n                        .url("https://example.com/")\n                        .params(ActivityEventParams.builder()\n                            .duration(20L)\n                            .referrer("https://example.com/document")\n                            .build())\n                        .build()))\n                .build();\n        ActivityResponse res = sdk.client().activity().report()\n                .request(req)\n                .call();\n        // handle response\n    }\n}', 'typescript_code_sample': 'import { Glean } from "@gleanwork/api-client";\nconst glean = new Glean({\n  apiToken: process.env["GLEAN_API_TOKEN"] ?? "",\n  instance: process.env["GLEAN_INSTANCE"] ?? "",\n});\nasync function run() {\n  await glean.client.activity.report({\n    events: [\n      {\n        action: "HISTORICAL_VIEW",\n        timestamp: new Date("2000-01-23T04:56:07.000Z"),\n        url: "https://example.com/",\n      },\n      {\n        action: "SEARCH",\n        params: {\n          query: "query",\n        },\n        timestamp: new Date("2000-01-23T04:56:07.000Z"),\n        url: "https://example.com/search?q=query",\n      },\n      {\n        action: "VIEW",\n        params: {\n          duration: 20,\n          referrer: "https://example.com/document",\n        },\n        timestamp: new Date("2000-01-23T04:56:07.000Z"),\n        url: "https://example.com/",\n      },\n    ],\n  });\n}\nrun();', 'curl_code_sample': 'curl -L \'https://instance-name-be.glean.com/rest/api/v1/activity\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Authorization: Bearer <token>\' \\\n-d \'{\n  "events": [\n    {\n      "url": "https://example.com/",\n      "action": "HISTORICAL_VIEW",\n      "timestamp": "2000-01-23T04:56:07.000Z"\n    },\n    {\n      "url": "https://example.com/search?q=query",\n      "action": "SEARCH",\n      "timestamp": "2000-01-23T04:56:07.000Z",\n      "params": {\n        "query": "query"\n      }\n    },\n    {\n      "url": "https://example.com/",\n      "action": "VIEW",\n      "timestamp": "2000-01-23T04:56:07.000Z",\n      "params": {\n        "duration": 20,\n        "referrer": "https://example.com/document"\n      }\n    }\n  ]\n}\''}
Scraping https://developers.glean.com/api/client-api/activity/feedback...
HREESUMMARY <summary><h3 class="openapi-markdown__details-summary-header-body">Body</h3></summary>
HREESUMMARY <summary id="request-sessioninfo"><span class="openapi-schema__container"><strong class="openapi-schema__property">sessionInfo</strong><span class="openapi-schema__name"> SessionInfo</span></span></summary>
HREESUMMARY <summary id="request-user"><span class="openapi-schema__container"><strong class="openapi-schema__property">user</strong><span class="openapi-schema__name"> User</span></span></summary>
HREESUMMARY <summary id="request-manualfeedbackinfo"><span class="openapi-schema__container"><strong class="openapi-schema__property">manualFeedbackInfo</strong><span class="openapi-schema__name"> ManualFeedbackInfo</span></span></summary>
HREESUMMARY <summary id="request-manualfeedbackinfo-chattranscript"><span class="openapi-schema__container"><strong class="openapi-schema__property">chatTranscript</strong><span class="openapi-schema__name"> FeedbackChatExchange[]</span></span></summary>
HREESUMMARY <summary id="request-manualfeedbackinfo-chattranscript-resultdocuments"><span class="openapi-schema__container"><strong class="openapi-schema__property">resultDocuments</strong><span class="openapi-schema__name"> undefined[]</span></span></summary>
HREESUMMARY <summary id="request-seenfeedbackinfo"><span class="openapi-schema__container"><strong class="openapi-schema__property">seenFeedbackInfo</strong><span class="openapi-schema__name"> SeenFeedbackInfo</span></span></summary>
HREESUMMARY <summary id="request-userviewinfo"><span class="openapi-schema__container"><strong class="openapi-schema__property">userViewInfo</strong><span class="openapi-schema__name"> UserViewInfo</span></span></summary>
HREESUMMARY <summary id="request-workflowfeedbackinfo"><span class="openapi-schema__container"><strong class="openapi-schema__property">workflowFeedbackInfo</strong><span class="openapi-schema__name"> WorkflowFeedbackInfo</span></span></summary>
HERESCHEMA {'id': {'type': 'string', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': False}, 'category': {'type': 'string', 'description': 'The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.\n\nPossible values: `ANNOUNCEMENT`, `AUTOCOMPLETE`, `COLLECTIONS`, `FEED`, `SEARCH`, `CHAT`, `NTP`, `WORKFLOWS`, `SUMMARY`, `GENERAL`, `PROMPTS`', 'required': False}, 'trackingTokens': {'type': 'string[]', 'description': 'A list of server-generated trackingTokens to which this event applies.', 'required': True}, 'event': {'type': 'string', 'description': "The action the user took within a Glean client with respect to the object referred to by the giventrackingToken.\n\nCLICK: The object's primary link was clicked with the intent to view its full representation. Depending on the object type, this may imply an external navigation or navigating to a new page or view within the Glean app.\nCONTAINER_CLICK: A link to the object's parent container (e.g. the folder in which it's located) was clicked.\nCOPY_LINK: The user copied a link to the primary link.\nCREATE: The user creates a document.\nDISMISS: The user dismissed the object such that it was hidden from view.\nDOWNVOTE: The user gave feedback that the object was not useful.\nEMAIL: The user attempted to send an email.\nEXECUTE: The user executed the object (e.g. ran a workflow).\nFILTER: The user applied a filter.\nFIRST_TOKEN: The first token of a streaming response is received.\nFOCUS_IN: The user clicked into an interactive element, e.g. the search box.\nLAST_TOKEN: The final token of a streaming response is received.\nMANUAL_FEEDBACK: The user submitted textual manual feedback regarding the object.\nMARK_AS_READ: The user explicitly marked the content as read.\nMESSAGE: The user attempted to send a message using their default messaing app.\nMIDDLE_CLICK: The user middle clicked the object's primary link with the intent to open its full representation in a new tab.\nPAGE_BLUR: The user puts a page out of focus but keeps it in the background.\nPAGE_FOCUS: The user puts a page in focus, meaning it is the first to receive keyboard events.\nPAGE_LEAVE: The user leaves a page and it is unloaded (by clicking a link, closing the tab/window, etc).\nPREVIEW: The user clicked the object's inline preview affordance.\nRIGHT_CLICK: The user right clicked the object's primary link. This may indicate an intent to open it in a new tab or copy it.\nSECTION_CLICK: The user clicked a link to a subsection of the primary object.\nSEEN: The user has likely seen the object (e.g. took action to make the object visible within the user's viewport).\nSHARE: The user shared the object with another user.\nSHOW_MORE: The user clicked the object's show more affordance.\nUPVOTE: The user gave feedback that the object was useful.\nVIEW: The object was visible within the user's viewport.\nVISIBLE: The object was visible within the user's viewport.\n\nPossible values: `CLICK`, `CONTAINER_CLICK`, `COPY_LINK`, `CREATE`, `DISMISS`, `DOWNVOTE`, `EMAIL`, `EXECUTE`, `FILTER`, `FIRST_TOKEN`, `FOCUS_IN`, `LAST_TOKEN`, `MANUAL_FEEDBACK`, `MARK_AS_READ`, `MESSAGE`, `MIDDLE_CLICK`, `PAGE_BLUR`, `PAGE_FOCUS`, `PAGE_LEAVE`, `PREVIEW`, `RELATED_CLICK`, `RIGHT_CLICK`, `SECTION_CLICK`, `SEEN`, `SHARE`, `SHOW_MORE`, `UPVOTE`, `VIEW`, `VISIBLE`", 'required': True}, 'position': {'type': 'integer', 'description': 'Position of the element in the case that the client controls order (such as feed and autocomplete).', 'required': False}, 'payload': {'type': 'string', 'description': 'For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content.', 'required': False}, 'sessionInfo': {'type': 'SessionInfo', 'description': "A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.", 'required': False, 'is_array': False, 'properties': {'sessionTrackingToken': {'type': 'string', 'description': "A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.", 'required': False}, 'tabId': {'type': 'string', 'description': 'A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.', 'required': False}, 'lastSeen': {'type': 'string<date-time>', 'description': 'The last time the server saw this token.', 'required': False}, 'lastQuery': {'type': 'string', 'description': 'The last query seen by the server.', 'required': False}}}, 'timestamp': {'type': 'string<date-time>', 'description': 'The ISO 8601 timestamp when the event occured.', 'required': False}, 'user': {'type': 'User', 'description': 'An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).', 'required': False, 'is_array': False, 'properties': {'userID': {'type': 'string', 'description': 'An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).', 'required': False}, 'origID': {'type': 'string', 'description': 'An opaque user ID for the authenticated user (ignores actas).', 'required': False}}}, 'pathname': {'type': 'string', 'description': 'The path the client was at when the feedback event triggered.', 'required': False}, 'channels': {'type': 'string[]', 'description': "Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean.\n\nPossible values: `COMPANY`, `GLEAN`", 'required': False}, 'url': {'type': 'string', 'description': 'The URL the client was at when the feedback event triggered.', 'required': False}, 'uiTree': {'type': 'string[]', 'description': 'The UI element tree associated with the event, if any.', 'required': False}, 'uiElement': {'type': 'string', 'description': 'The UI element associated with the event, if any.', 'required': False}, 'manualFeedbackInfo': {'type': 'ManualFeedbackInfo', 'description': 'The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.', 'required': False, 'is_array': True, 'properties': {'email': {'type': 'string', 'description': 'The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.', 'required': False}, 'source': {'type': 'string', 'description': 'The source associated with the Feedback.event.MANUAL_FEEDBACK event.\n\nPossible values: `AUTOCOMPLETE`, `CALENDAR`, `CHAT`, `CHAT_GENERAL`, `CONCEPT_CARD`, `DESKTOP_APP`, `DISAMBIGUATION_CARD`, `EXPERT_DETECTION`, `FEED`, `GENERATED_Q_AND_A`, `INLINE_MENU`, `NATIVE_RESULT`, `Q_AND_A`, `RELATED_QUESTIONS`, `REPORT_ISSUE`, `SCIOBOT`, `SEARCH`, `SIDEBAR`, `SUMMARY`', 'required': False}, 'issue': {'type': 'string', 'description': 'The issue the user indicated in the feedback.', 'required': False}, 'issues': {'type': 'string[]', 'description': 'The issue(s) the user indicated in the feedback.\n\nPossible values: `INACCURATE_RESPONSE`, `INCOMPLETE_OR_NO_ANSWER`, `INCORRECT_CITATION`, `MISSING_CITATION`, `OTHER`, `OUTDATED_RESPONSE`, `RESULT_MISSING`, `RESULT_SHOULD_NOT_APPEAR`, `RESULTS_HELPFUL`, `RESULTS_POOR_ORDER`, `TOO_MUCH_ONE_KIND`', 'required': False}, 'imageUrls': {'type': 'string[]', 'description': 'URLs of images uploaded by user when providing feedback', 'required': False}, 'query': {'type': 'string', 'description': 'The query associated with the Feedback.event.MANUAL_FEEDBACK event.', 'required': False}, 'obscuredQuery': {'type': 'string', 'description': 'The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.', 'required': False}, 'activeTab': {'type': 'string', 'description': 'Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.', 'required': False}, 'comments': {'type': 'string', 'description': 'The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.', 'required': False}, 'searchResults': {'type': 'string[]', 'description': 'The array of search result Glean Document IDs, ordered by top to bottom result.', 'required': False}, 'previousMessages': {'type': 'string[]', 'description': 'The array of previous messages in a chat session, ordered by oldest to newest.', 'required': False}, 'chatTranscript': {'type': 'FeedbackChatExchange[]', 'description': 'Array of previous request/response exchanges, ordered by oldest to newest.', 'required': False, 'is_array': True, 'properties': {'timestamp': {'type': 'integer<int64>', 'description': 'Unix timestamp in millis for the chat request.', 'required': False}, 'agent': {'type': 'string', 'description': 'Either DEFAULT (company knowledge) or GPT (world knowledge).', 'required': False}, 'userQuery': {'type': 'string', 'description': 'Initial query entered by the user.', 'required': False}, 'searchQuery': {'type': 'string', 'description': 'Search query performed by the agent.', 'required': False}, 'resultDocuments': {'type': 'undefined[]', 'description': 'List of documents read by the agent.', 'required': False, 'is_array': True, 'properties': {'title': {'type': 'string', 'description': 'titlestring', 'required': False}, 'url': {'type': 'string', 'description': 'urlstring', 'required': False}}}, 'response': {'type': 'string', 'description': 'responsestring', 'required': False}}}, 'numQueriesFromFirstRun': {'type': 'integer', 'description': 'How many times this query has been run in the past.', 'required': False}, 'vote': {'type': 'string', 'description': 'The vote associated with the Feedback.event.MANUAL_FEEDBACK event.\n\nPossible values: `UPVOTE`, `DOWNVOTE`', 'required': False}, 'rating': {'type': 'integer', 'description': 'A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.', 'required': False}, 'ratingKey': {'type': 'string', 'description': 'A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".', 'required': False}, 'ratingScale': {'type': 'integer', 'description': 'The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.', 'required': False}}}, 'seenFeedbackInfo': {'type': 'SeenFeedbackInfo', 'description': 'The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.', 'required': False, 'is_array': False, 'properties': {'isExplicit': {'type': 'boolean', 'description': 'The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.', 'required': False}}}, 'userViewInfo': {'type': 'UserViewInfo', 'description': 'Unique Glean Document ID of the associated document.', 'required': False, 'is_array': False, 'properties': {'docId': {'type': 'string', 'description': 'Unique Glean Document ID of the associated document.', 'required': False}, 'docTitle': {'type': 'string', 'description': 'Title of associated document.', 'required': False}, 'docUrl': {'type': 'string', 'description': 'URL of associated document.', 'required': False}}}, 'workflowFeedbackInfo': {'type': 'WorkflowFeedbackInfo', 'description': 'Where the feedback of the workflow originated from\n\nPossible values: `ZERO_STATE`, `LIBRARY`, `HOMEPAGE`', 'required': False, 'is_array': False, 'properties': {'source': {'type': 'string', 'description': 'Where the feedback of the workflow originated from\n\nPossible values: `ZERO_STATE`, `LIBRARY`, `HOMEPAGE`', 'required': False}}}, 'applicationId': {'type': 'string', 'description': 'The application ID of the client that sent the feedback event.', 'required': False}, 'agentId': {'type': 'string', 'description': 'The agent ID of the client that sent the feedback event.', 'required': False}}
HEREOUTER None
HERESCHEMA {}
HEREREQUEST {'id': {'type': 'string', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': False}, 'category': {'type': 'string', 'description': 'The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.\n\nPossible values: `ANNOUNCEMENT`, `AUTOCOMPLETE`, `COLLECTIONS`, `FEED`, `SEARCH`, `CHAT`, `NTP`, `WORKFLOWS`, `SUMMARY`, `GENERAL`, `PROMPTS`', 'required': False}, 'trackingTokens': {'type': 'string[]', 'description': 'A list of server-generated trackingTokens to which this event applies.', 'required': True}, 'event': {'type': 'string', 'description': "The action the user took within a Glean client with respect to the object referred to by the giventrackingToken.\n\nCLICK: The object's primary link was clicked with the intent to view its full representation. Depending on the object type, this may imply an external navigation or navigating to a new page or view within the Glean app.\nCONTAINER_CLICK: A link to the object's parent container (e.g. the folder in which it's located) was clicked.\nCOPY_LINK: The user copied a link to the primary link.\nCREATE: The user creates a document.\nDISMISS: The user dismissed the object such that it was hidden from view.\nDOWNVOTE: The user gave feedback that the object was not useful.\nEMAIL: The user attempted to send an email.\nEXECUTE: The user executed the object (e.g. ran a workflow).\nFILTER: The user applied a filter.\nFIRST_TOKEN: The first token of a streaming response is received.\nFOCUS_IN: The user clicked into an interactive element, e.g. the search box.\nLAST_TOKEN: The final token of a streaming response is received.\nMANUAL_FEEDBACK: The user submitted textual manual feedback regarding the object.\nMARK_AS_READ: The user explicitly marked the content as read.\nMESSAGE: The user attempted to send a message using their default messaing app.\nMIDDLE_CLICK: The user middle clicked the object's primary link with the intent to open its full representation in a new tab.\nPAGE_BLUR: The user puts a page out of focus but keeps it in the background.\nPAGE_FOCUS: The user puts a page in focus, meaning it is the first to receive keyboard events.\nPAGE_LEAVE: The user leaves a page and it is unloaded (by clicking a link, closing the tab/window, etc).\nPREVIEW: The user clicked the object's inline preview affordance.\nRIGHT_CLICK: The user right clicked the object's primary link. This may indicate an intent to open it in a new tab or copy it.\nSECTION_CLICK: The user clicked a link to a subsection of the primary object.\nSEEN: The user has likely seen the object (e.g. took action to make the object visible within the user's viewport).\nSHARE: The user shared the object with another user.\nSHOW_MORE: The user clicked the object's show more affordance.\nUPVOTE: The user gave feedback that the object was useful.\nVIEW: The object was visible within the user's viewport.\nVISIBLE: The object was visible within the user's viewport.\n\nPossible values: `CLICK`, `CONTAINER_CLICK`, `COPY_LINK`, `CREATE`, `DISMISS`, `DOWNVOTE`, `EMAIL`, `EXECUTE`, `FILTER`, `FIRST_TOKEN`, `FOCUS_IN`, `LAST_TOKEN`, `MANUAL_FEEDBACK`, `MARK_AS_READ`, `MESSAGE`, `MIDDLE_CLICK`, `PAGE_BLUR`, `PAGE_FOCUS`, `PAGE_LEAVE`, `PREVIEW`, `RELATED_CLICK`, `RIGHT_CLICK`, `SECTION_CLICK`, `SEEN`, `SHARE`, `SHOW_MORE`, `UPVOTE`, `VIEW`, `VISIBLE`", 'required': True}, 'position': {'type': 'integer', 'description': 'Position of the element in the case that the client controls order (such as feed and autocomplete).', 'required': False}, 'payload': {'type': 'string', 'description': 'For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content.', 'required': False}, 'sessionInfo': {'type': 'SessionInfo', 'description': "A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.", 'required': False, 'is_array': False, 'properties': {'sessionTrackingToken': {'type': 'string', 'description': "A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.", 'required': False}, 'tabId': {'type': 'string', 'description': 'A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.', 'required': False}, 'lastSeen': {'type': 'string<date-time>', 'description': 'The last time the server saw this token.', 'required': False}, 'lastQuery': {'type': 'string', 'description': 'The last query seen by the server.', 'required': False}}}, 'timestamp': {'type': 'string<date-time>', 'description': 'The ISO 8601 timestamp when the event occured.', 'required': False}, 'user': {'type': 'User', 'description': 'An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).', 'required': False, 'is_array': False, 'properties': {'userID': {'type': 'string', 'description': 'An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).', 'required': False}, 'origID': {'type': 'string', 'description': 'An opaque user ID for the authenticated user (ignores actas).', 'required': False}}}, 'pathname': {'type': 'string', 'description': 'The path the client was at when the feedback event triggered.', 'required': False}, 'channels': {'type': 'string[]', 'description': "Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean.\n\nPossible values: `COMPANY`, `GLEAN`", 'required': False}, 'url': {'type': 'string', 'description': 'The URL the client was at when the feedback event triggered.', 'required': False}, 'uiTree': {'type': 'string[]', 'description': 'The UI element tree associated with the event, if any.', 'required': False}, 'uiElement': {'type': 'string', 'description': 'The UI element associated with the event, if any.', 'required': False}, 'manualFeedbackInfo': {'type': 'ManualFeedbackInfo', 'description': 'The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.', 'required': False, 'is_array': True, 'properties': {'email': {'type': 'string', 'description': 'The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.', 'required': False}, 'source': {'type': 'string', 'description': 'The source associated with the Feedback.event.MANUAL_FEEDBACK event.\n\nPossible values: `AUTOCOMPLETE`, `CALENDAR`, `CHAT`, `CHAT_GENERAL`, `CONCEPT_CARD`, `DESKTOP_APP`, `DISAMBIGUATION_CARD`, `EXPERT_DETECTION`, `FEED`, `GENERATED_Q_AND_A`, `INLINE_MENU`, `NATIVE_RESULT`, `Q_AND_A`, `RELATED_QUESTIONS`, `REPORT_ISSUE`, `SCIOBOT`, `SEARCH`, `SIDEBAR`, `SUMMARY`', 'required': False}, 'issue': {'type': 'string', 'description': 'The issue the user indicated in the feedback.', 'required': False}, 'issues': {'type': 'string[]', 'description': 'The issue(s) the user indicated in the feedback.\n\nPossible values: `INACCURATE_RESPONSE`, `INCOMPLETE_OR_NO_ANSWER`, `INCORRECT_CITATION`, `MISSING_CITATION`, `OTHER`, `OUTDATED_RESPONSE`, `RESULT_MISSING`, `RESULT_SHOULD_NOT_APPEAR`, `RESULTS_HELPFUL`, `RESULTS_POOR_ORDER`, `TOO_MUCH_ONE_KIND`', 'required': False}, 'imageUrls': {'type': 'string[]', 'description': 'URLs of images uploaded by user when providing feedback', 'required': False}, 'query': {'type': 'string', 'description': 'The query associated with the Feedback.event.MANUAL_FEEDBACK event.', 'required': False}, 'obscuredQuery': {'type': 'string', 'description': 'The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.', 'required': False}, 'activeTab': {'type': 'string', 'description': 'Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.', 'required': False}, 'comments': {'type': 'string', 'description': 'The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.', 'required': False}, 'searchResults': {'type': 'string[]', 'description': 'The array of search result Glean Document IDs, ordered by top to bottom result.', 'required': False}, 'previousMessages': {'type': 'string[]', 'description': 'The array of previous messages in a chat session, ordered by oldest to newest.', 'required': False}, 'chatTranscript': {'type': 'FeedbackChatExchange[]', 'description': 'Array of previous request/response exchanges, ordered by oldest to newest.', 'required': False, 'is_array': True, 'properties': {'timestamp': {'type': 'integer<int64>', 'description': 'Unix timestamp in millis for the chat request.', 'required': False}, 'agent': {'type': 'string', 'description': 'Either DEFAULT (company knowledge) or GPT (world knowledge).', 'required': False}, 'userQuery': {'type': 'string', 'description': 'Initial query entered by the user.', 'required': False}, 'searchQuery': {'type': 'string', 'description': 'Search query performed by the agent.', 'required': False}, 'resultDocuments': {'type': 'undefined[]', 'description': 'List of documents read by the agent.', 'required': False, 'is_array': True, 'properties': {'title': {'type': 'string', 'description': 'titlestring', 'required': False}, 'url': {'type': 'string', 'description': 'urlstring', 'required': False}}}, 'response': {'type': 'string', 'description': 'responsestring', 'required': False}}}, 'numQueriesFromFirstRun': {'type': 'integer', 'description': 'How many times this query has been run in the past.', 'required': False}, 'vote': {'type': 'string', 'description': 'The vote associated with the Feedback.event.MANUAL_FEEDBACK event.\n\nPossible values: `UPVOTE`, `DOWNVOTE`', 'required': False}, 'rating': {'type': 'integer', 'description': 'A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.', 'required': False}, 'ratingKey': {'type': 'string', 'description': 'A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".', 'required': False}, 'ratingScale': {'type': 'integer', 'description': 'The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.', 'required': False}}}, 'seenFeedbackInfo': {'type': 'SeenFeedbackInfo', 'description': 'The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.', 'required': False, 'is_array': False, 'properties': {'isExplicit': {'type': 'boolean', 'description': 'The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.', 'required': False}}}, 'userViewInfo': {'type': 'UserViewInfo', 'description': 'Unique Glean Document ID of the associated document.', 'required': False, 'is_array': False, 'properties': {'docId': {'type': 'string', 'description': 'Unique Glean Document ID of the associated document.', 'required': False}, 'docTitle': {'type': 'string', 'description': 'Title of associated document.', 'required': False}, 'docUrl': {'type': 'string', 'description': 'URL of associated document.', 'required': False}}}, 'workflowFeedbackInfo': {'type': 'WorkflowFeedbackInfo', 'description': 'Where the feedback of the workflow originated from\n\nPossible values: `ZERO_STATE`, `LIBRARY`, `HOMEPAGE`', 'required': False, 'is_array': False, 'properties': {'source': {'type': 'string', 'description': 'Where the feedback of the workflow originated from\n\nPossible values: `ZERO_STATE`, `LIBRARY`, `HOMEPAGE`', 'required': False}}}, 'applicationId': {'type': 'string', 'description': 'The application ID of the client that sent the feedback event.', 'required': False}, 'agentId': {'type': 'string', 'description': 'The agent ID of the client that sent the feedback event.', 'required': False}}
HERERESPONSE {}
HERE {'title': 'Report client activity', 'url': 'https://developers.glean.com/api/client-api/activity/feedback', 'authentication': 'Authorization: http', 'request_schema': {'id': {'type': 'string', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': False}, 'category': {'type': 'string', 'description': 'The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.\n\nPossible values: `ANNOUNCEMENT`, `AUTOCOMPLETE`, `COLLECTIONS`, `FEED`, `SEARCH`, `CHAT`, `NTP`, `WORKFLOWS`, `SUMMARY`, `GENERAL`, `PROMPTS`', 'required': False}, 'trackingTokens': {'type': 'string[]', 'description': 'A list of server-generated trackingTokens to which this event applies.', 'required': True}, 'event': {'type': 'string', 'description': "The action the user took within a Glean client with respect to the object referred to by the giventrackingToken.\n\nCLICK: The object's primary link was clicked with the intent to view its full representation. Depending on the object type, this may imply an external navigation or navigating to a new page or view within the Glean app.\nCONTAINER_CLICK: A link to the object's parent container (e.g. the folder in which it's located) was clicked.\nCOPY_LINK: The user copied a link to the primary link.\nCREATE: The user creates a document.\nDISMISS: The user dismissed the object such that it was hidden from view.\nDOWNVOTE: The user gave feedback that the object was not useful.\nEMAIL: The user attempted to send an email.\nEXECUTE: The user executed the object (e.g. ran a workflow).\nFILTER: The user applied a filter.\nFIRST_TOKEN: The first token of a streaming response is received.\nFOCUS_IN: The user clicked into an interactive element, e.g. the search box.\nLAST_TOKEN: The final token of a streaming response is received.\nMANUAL_FEEDBACK: The user submitted textual manual feedback regarding the object.\nMARK_AS_READ: The user explicitly marked the content as read.\nMESSAGE: The user attempted to send a message using their default messaing app.\nMIDDLE_CLICK: The user middle clicked the object's primary link with the intent to open its full representation in a new tab.\nPAGE_BLUR: The user puts a page out of focus but keeps it in the background.\nPAGE_FOCUS: The user puts a page in focus, meaning it is the first to receive keyboard events.\nPAGE_LEAVE: The user leaves a page and it is unloaded (by clicking a link, closing the tab/window, etc).\nPREVIEW: The user clicked the object's inline preview affordance.\nRIGHT_CLICK: The user right clicked the object's primary link. This may indicate an intent to open it in a new tab or copy it.\nSECTION_CLICK: The user clicked a link to a subsection of the primary object.\nSEEN: The user has likely seen the object (e.g. took action to make the object visible within the user's viewport).\nSHARE: The user shared the object with another user.\nSHOW_MORE: The user clicked the object's show more affordance.\nUPVOTE: The user gave feedback that the object was useful.\nVIEW: The object was visible within the user's viewport.\nVISIBLE: The object was visible within the user's viewport.\n\nPossible values: `CLICK`, `CONTAINER_CLICK`, `COPY_LINK`, `CREATE`, `DISMISS`, `DOWNVOTE`, `EMAIL`, `EXECUTE`, `FILTER`, `FIRST_TOKEN`, `FOCUS_IN`, `LAST_TOKEN`, `MANUAL_FEEDBACK`, `MARK_AS_READ`, `MESSAGE`, `MIDDLE_CLICK`, `PAGE_BLUR`, `PAGE_FOCUS`, `PAGE_LEAVE`, `PREVIEW`, `RELATED_CLICK`, `RIGHT_CLICK`, `SECTION_CLICK`, `SEEN`, `SHARE`, `SHOW_MORE`, `UPVOTE`, `VIEW`, `VISIBLE`", 'required': True}, 'position': {'type': 'integer', 'description': 'Position of the element in the case that the client controls order (such as feed and autocomplete).', 'required': False}, 'payload': {'type': 'string', 'description': 'For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content.', 'required': False}, 'sessionInfo': {'type': 'SessionInfo', 'description': "A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.", 'required': False, 'is_array': False, 'properties': {'sessionTrackingToken': {'type': 'string', 'description': "A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.", 'required': False}, 'tabId': {'type': 'string', 'description': 'A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.', 'required': False}, 'lastSeen': {'type': 'string<date-time>', 'description': 'The last time the server saw this token.', 'required': False}, 'lastQuery': {'type': 'string', 'description': 'The last query seen by the server.', 'required': False}}}, 'timestamp': {'type': 'string<date-time>', 'description': 'The ISO 8601 timestamp when the event occured.', 'required': False}, 'user': {'type': 'User', 'description': 'An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).', 'required': False, 'is_array': False, 'properties': {'userID': {'type': 'string', 'description': 'An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).', 'required': False}, 'origID': {'type': 'string', 'description': 'An opaque user ID for the authenticated user (ignores actas).', 'required': False}}}, 'pathname': {'type': 'string', 'description': 'The path the client was at when the feedback event triggered.', 'required': False}, 'channels': {'type': 'string[]', 'description': "Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean.\n\nPossible values: `COMPANY`, `GLEAN`", 'required': False}, 'url': {'type': 'string', 'description': 'The URL the client was at when the feedback event triggered.', 'required': False}, 'uiTree': {'type': 'string[]', 'description': 'The UI element tree associated with the event, if any.', 'required': False}, 'uiElement': {'type': 'string', 'description': 'The UI element associated with the event, if any.', 'required': False}, 'manualFeedbackInfo': {'type': 'ManualFeedbackInfo', 'description': 'The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.', 'required': False, 'is_array': True, 'properties': {'email': {'type': 'string', 'description': 'The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.', 'required': False}, 'source': {'type': 'string', 'description': 'The source associated with the Feedback.event.MANUAL_FEEDBACK event.\n\nPossible values: `AUTOCOMPLETE`, `CALENDAR`, `CHAT`, `CHAT_GENERAL`, `CONCEPT_CARD`, `DESKTOP_APP`, `DISAMBIGUATION_CARD`, `EXPERT_DETECTION`, `FEED`, `GENERATED_Q_AND_A`, `INLINE_MENU`, `NATIVE_RESULT`, `Q_AND_A`, `RELATED_QUESTIONS`, `REPORT_ISSUE`, `SCIOBOT`, `SEARCH`, `SIDEBAR`, `SUMMARY`', 'required': False}, 'issue': {'type': 'string', 'description': 'The issue the user indicated in the feedback.', 'required': False}, 'issues': {'type': 'string[]', 'description': 'The issue(s) the user indicated in the feedback.\n\nPossible values: `INACCURATE_RESPONSE`, `INCOMPLETE_OR_NO_ANSWER`, `INCORRECT_CITATION`, `MISSING_CITATION`, `OTHER`, `OUTDATED_RESPONSE`, `RESULT_MISSING`, `RESULT_SHOULD_NOT_APPEAR`, `RESULTS_HELPFUL`, `RESULTS_POOR_ORDER`, `TOO_MUCH_ONE_KIND`', 'required': False}, 'imageUrls': {'type': 'string[]', 'description': 'URLs of images uploaded by user when providing feedback', 'required': False}, 'query': {'type': 'string', 'description': 'The query associated with the Feedback.event.MANUAL_FEEDBACK event.', 'required': False}, 'obscuredQuery': {'type': 'string', 'description': 'The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.', 'required': False}, 'activeTab': {'type': 'string', 'description': 'Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.', 'required': False}, 'comments': {'type': 'string', 'description': 'The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.', 'required': False}, 'searchResults': {'type': 'string[]', 'description': 'The array of search result Glean Document IDs, ordered by top to bottom result.', 'required': False}, 'previousMessages': {'type': 'string[]', 'description': 'The array of previous messages in a chat session, ordered by oldest to newest.', 'required': False}, 'chatTranscript': {'type': 'FeedbackChatExchange[]', 'description': 'Array of previous request/response exchanges, ordered by oldest to newest.', 'required': False, 'is_array': True, 'properties': {'timestamp': {'type': 'integer<int64>', 'description': 'Unix timestamp in millis for the chat request.', 'required': False}, 'agent': {'type': 'string', 'description': 'Either DEFAULT (company knowledge) or GPT (world knowledge).', 'required': False}, 'userQuery': {'type': 'string', 'description': 'Initial query entered by the user.', 'required': False}, 'searchQuery': {'type': 'string', 'description': 'Search query performed by the agent.', 'required': False}, 'resultDocuments': {'type': 'undefined[]', 'description': 'List of documents read by the agent.', 'required': False, 'is_array': True, 'properties': {'title': {'type': 'string', 'description': 'titlestring', 'required': False}, 'url': {'type': 'string', 'description': 'urlstring', 'required': False}}}, 'response': {'type': 'string', 'description': 'responsestring', 'required': False}}}, 'numQueriesFromFirstRun': {'type': 'integer', 'description': 'How many times this query has been run in the past.', 'required': False}, 'vote': {'type': 'string', 'description': 'The vote associated with the Feedback.event.MANUAL_FEEDBACK event.\n\nPossible values: `UPVOTE`, `DOWNVOTE`', 'required': False}, 'rating': {'type': 'integer', 'description': 'A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.', 'required': False}, 'ratingKey': {'type': 'string', 'description': 'A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".', 'required': False}, 'ratingScale': {'type': 'integer', 'description': 'The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.', 'required': False}}}, 'seenFeedbackInfo': {'type': 'SeenFeedbackInfo', 'description': 'The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.', 'required': False, 'is_array': False, 'properties': {'isExplicit': {'type': 'boolean', 'description': 'The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.', 'required': False}}}, 'userViewInfo': {'type': 'UserViewInfo', 'description': 'Unique Glean Document ID of the associated document.', 'required': False, 'is_array': False, 'properties': {'docId': {'type': 'string', 'description': 'Unique Glean Document ID of the associated document.', 'required': False}, 'docTitle': {'type': 'string', 'description': 'Title of associated document.', 'required': False}, 'docUrl': {'type': 'string', 'description': 'URL of associated document.', 'required': False}}}, 'workflowFeedbackInfo': {'type': 'WorkflowFeedbackInfo', 'description': 'Where the feedback of the workflow originated from\n\nPossible values: `ZERO_STATE`, `LIBRARY`, `HOMEPAGE`', 'required': False, 'is_array': False, 'properties': {'source': {'type': 'string', 'description': 'Where the feedback of the workflow originated from\n\nPossible values: `ZERO_STATE`, `LIBRARY`, `HOMEPAGE`', 'required': False}}}, 'applicationId': {'type': 'string', 'description': 'The application ID of the client that sent the feedback event.', 'required': False}, 'agentId': {'type': 'string', 'description': 'The agent ID of the client that sent the feedback event.', 'required': False}}, 'response_schema': {}, 'request_mime_type': 'application/json', 'response_mime_type': '', 'python_code_sample': 'from glean.api_client import Glean, models\nimport os\nwith Glean(\n    api_token=os.getenv("GLEAN_API_TOKEN", ""),\n    instance=os.getenv("GLEAN_INSTANCE", ""),\n) as glean:\n    glean.client.activity.feedback(feedback1={\n        "tracking_tokens": [\n            "trackingTokens",\n        ],\n        "event": models.Event.VIEW,\n    })\n    # Use the SDK ...', 'go_code_sample': 'package main\nimport(\n\t"context"\n\t"os"\n\tapiclientgo "github.com/gleanwork/api-client-go"\n\t"github.com/gleanwork/api-client-go/models/components"\n\t"log"\n)\nfunc main() {\n    ctx := context.Background()\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv("GLEAN_API_TOKEN")),\n        apiclientgo.WithInstance(os.Getenv("GLEAN_INSTANCE")),\n    )\n    res, err := s.Client.Activity.Feedback(ctx, nil, &components.Feedback{\n        TrackingTokens: []string{\n            "trackingTokens",\n        },\n        Event: components.EventView,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}', 'java_code_sample': 'package hello.world;\nimport java.lang.Exception;\nimport java.util.List;\nimport org.openapis.openapi.Glean;\nimport org.openapis.openapi.models.components.Event;\nimport org.openapis.openapi.models.components.Feedback;\nimport org.openapis.openapi.models.operations.FeedbackResponse;\npublic class Application {\n    public static void main(String[] args) throws Exception {\n        Glean sdk = Glean.builder()\n                .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))\n            .build();\n        FeedbackResponse res = sdk.client().activity().feedback()\n                .feedback1(Feedback.builder()\n                    .trackingTokens(List.of(\n                        "trackingTokens"))\n                    .event(Event.VIEW)\n                    .build())\n                .call();\n        // handle response\n    }\n}', 'typescript_code_sample': 'import { Glean } from "@gleanwork/api-client";\nconst glean = new Glean({\n  apiToken: process.env["GLEAN_API_TOKEN"] ?? "",\n  instance: process.env["GLEAN_INSTANCE"] ?? "",\n});\nasync function run() {\n  await glean.client.activity.feedback({\n    trackingTokens: [\n      "trackingTokens",\n    ],\n    event: "VIEW",\n  });\n}\nrun();', 'curl_code_sample': 'curl -L \'https://instance-name-be.glean.com/rest/api/v1/feedback\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Authorization: Bearer <token>\' \\\n-d \'{\n  "trackingTokens": [\n    "trackingTokens"\n  ],\n  "event": "VIEW"\n}\''}
Scraping https://developers.glean.com/api/client-api/agents/create-and-stream-run...
HREESUMMARY <summary><h3 class="openapi-markdown__details-summary-header-body">Body<strong class="openapi-schema__required">required</strong></h3></summary>
HREESUMMARY <summary id="request-input"><span class="openapi-schema__container"><strong class="openapi-schema__property">input</strong><span class="openapi-schema__name"> object</span></span></summary>
HREESUMMARY <summary id="request-messages"><span class="openapi-schema__container"><strong class="openapi-schema__property">messages</strong><span class="openapi-schema__name"> object[]</span></span></summary>
HREESUMMARY <summary id="request-messages-content"><span class="openapi-schema__container"><strong class="openapi-schema__property">content</strong><span class="openapi-schema__name"> object[]</span></span></summary>
HREESUMMARY <summary id="request-metadata"><span class="openapi-schema__container"><strong class="openapi-schema__property">metadata</strong><span class="openapi-schema__name"> object</span></span></summary>
HERESCHEMA {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}}
HEREOUTER <div class="openapi-tabs__schema-container"><div class="openapi-tabs__schema-tabs-container"><ul aria-orientation="horizontal" class="openapi-tabs__schema-list-container tabs openapi-tabs__schema" role="tablist"><li aria-selected="true" class="tabs__item openapi-tabs__schema-item active" role="tab" tabindex="0"><span class="openapi-tabs__schema-label">Schema</span></li><li aria-selected="false" class="tabs__item openapi-tabs__schema-item" role="tab" tabindex="-1"><span class="openapi-tabs__schema-label">Example (auto)</span></li></ul></div><div class="margin-top--md"><div class="tabItem_Ymn6" role="tabpanel"><details class="details_lb9f isBrowser_bmU9 alert alert--info details_b_Ee openapi-markdown__details response" data-collapsed="false" open=""><summary><strong class="openapi-markdown__details-summary-response">Schema</strong></summary><div style="display: block; overflow: visible; height: auto;"><div class="collapsibleContent_i85q"><div style="text-align: left; margin-left: 1rem;"></div><ul style="margin-left: 1rem;"><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">string</strong><span class="openapi-schema__name">string</span></span><p>The server will send a stream of events in server-sent events (SSE) format.</p><div><strong>Example: </strong><span><code>id: 1
event: message
data: {"messages":[{"role":"GLEAN_AI","content":[{"text":"Hello","type":"text"}]}]}

id: 2
event: message
data: {"messages":[{"role":"GLEAN_AI","content":[{"text":",","type":"text"}]}]}

id: 3
event: message
data: {"messages":[{"role":"GLEAN_AI","content":[{"text":" I'm","type":"text"}]}]}

id: 4
event: message
data: {"messages":[{"role":"GLEAN_AI","content":[{"text":" your","type":"text"}]}]}
</code></span></div></div></div></ul></div></div></details></div><div class="tabItem_Ymn6" hidden="" role="tabpanel"><div class="openapi-code__code-samples-container"><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #393A34; --prism-background-color: #f6f8fa;"><div class="codeBlockContent_QJqH"><pre class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color: rgb(57, 58, 52); background-color: rgb(246, 248, 250);" tabindex="0"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token string" style="color: rgb(227, 17, 108);">"id: 1\nevent: message\ndata: {\"messages\":[{\"role\":\"GLEAN_AI\",\"content\":[{\"text\":\"Hello\",\"type\":\"text\"}]}]}\n\nid: 2\nevent: message\ndata: {\"messages\":[{\"role\":\"GLEAN_AI\",\"content\":[{\"text\":\",\",\"type\":\"text\"}]}]}\n\nid: 3\nevent: message\ndata: {\"messages\":[{\"role\":\"GLEAN_AI\",\"content\":[{\"text\":\" I'm\",\"type\":\"text\"}]}]}\n\nid: 4\nevent: message\ndata: {\"messages\":[{\"role\":\"GLEAN_AI\",\"content\":[{\"text\":\" your\",\"type\":\"text\"}]}]}\n"</span><br/></span></code></pre><div class="buttonGroup_M5ko"><button aria-label="Copy code to clipboard" class="clean-btn" title="Copy" type="button"><span aria-hidden="true" class="copyButtonIcons_IEyt"><svg class="copyButtonIcon_TrPX" viewbox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" fill="currentColor"></path></svg><svg class="copyButtonSuccessIcon_cVMy" viewbox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" fill="currentColor"></path></svg></span></button></div></div></div></div></div></div></div>
HREESUMMARY <summary><strong class="openapi-markdown__details-summary-response">Schema</strong></summary>
HERESCHEMA {}
HEREREQUEST {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}}
HERERESPONSE {}
HERE {'title': 'Create an agent run and stream the response', 'url': 'https://developers.glean.com/api/client-api/agents/create-and-stream-run', 'authentication': 'Authorization: http', 'request_schema': {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}}, 'response_schema': {}, 'request_mime_type': 'application/json', 'response_mime_type': 'text/event-stream', 'python_code_sample': 'from glean.api_client import Glean\nimport os\nwith Glean(\n    api_token=os.getenv("GLEAN_API_TOKEN", ""),\n    instance=os.getenv("GLEAN_INSTANCE", ""),\n) as glean:\n    res = glean.client.agents.run_stream(agent_id="<id>", messages=[\n        {\n            "role": "USER",\n        },\n    ])\n    # Handle response\n    print(res)', 'go_code_sample': 'package main\nimport(\n\t"context"\n\t"os"\n\tapiclientgo "github.com/gleanwork/api-client-go"\n\t"github.com/gleanwork/api-client-go/models/components"\n\t"log"\n)\nfunc main() {\n    ctx := context.Background()\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv("GLEAN_API_TOKEN")),\n        apiclientgo.WithInstance(os.Getenv("GLEAN_INSTANCE")),\n    )\n    res, err := s.Client.Agents.RunStream(ctx, components.AgentRunCreate{\n        AgentID: "<id>",\n        Messages: []components.Message{\n            components.Message{\n                Role: apiclientgo.String("USER"),\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Res != nil {\n        // handle response\n    }\n}', 'java_code_sample': 'package hello.world;\nimport java.lang.Exception;\nimport java.util.List;\nimport org.openapis.openapi.Glean;\nimport org.openapis.openapi.models.components.AgentRunCreate;\nimport org.openapis.openapi.models.components.Message;\nimport org.openapis.openapi.models.operations.CreateAndStreamRunResponse;\npublic class Application {\n    public static void main(String[] args) throws Exception {\n        Glean sdk = Glean.builder()\n                .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))\n            .build();\n        AgentRunCreate req = AgentRunCreate.builder()\n                .agentId("<id>")\n                .messages(List.of(\n                    Message.builder()\n                        .role("USER")\n                        .build()))\n                .build();\n        CreateAndStreamRunResponse res = sdk.client().agents().runStream()\n                .request(req)\n                .call();\n        if (res.res().isPresent()) {\n            // handle response\n        }\n    }\n}', 'typescript_code_sample': 'import { Glean } from "@gleanwork/api-client";\nconst glean = new Glean({\n  apiToken: process.env["GLEAN_API_TOKEN"] ?? "",\n  instance: process.env["GLEAN_INSTANCE"] ?? "",\n});\nasync function run() {\n  const result = await glean.client.agents.runStream({\n    agentId: "<id>",\n    messages: [\n      {\n        role: "USER",\n      },\n      {\n        role: "USER",\n      },\n      {\n        role: "USER",\n      },\n    ],\n  });\n  // Handle the result\n  console.log(result);\n}\nrun();', 'curl_code_sample': 'curl -L \'https://instance-name-be.glean.com/rest/api/v1/agents/runs/stream\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Accept: text/event-stream\' \\\n-H \'Authorization: Bearer <token>\' \\\n-d \'{\n  "agent_id": "string",\n  "input": {},\n  "messages": [\n    {\n      "role": "USER",\n      "content": [\n        {\n          "text": "string",\n          "type": "text"\n        }\n      ]\n    }\n  ],\n  "metadata": {}\n}\''}
Scraping https://developers.glean.com/api/client-api/agents/create-and-wait-run...
HREESUMMARY <summary><h3 class="openapi-markdown__details-summary-header-body">Body<strong class="openapi-schema__required">required</strong></h3></summary>
HREESUMMARY <summary id="request-input"><span class="openapi-schema__container"><strong class="openapi-schema__property">input</strong><span class="openapi-schema__name"> object</span></span></summary>
HREESUMMARY <summary id="request-messages"><span class="openapi-schema__container"><strong class="openapi-schema__property">messages</strong><span class="openapi-schema__name"> object[]</span></span></summary>
HREESUMMARY <summary id="request-messages-content"><span class="openapi-schema__container"><strong class="openapi-schema__property">content</strong><span class="openapi-schema__name"> object[]</span></span></summary>
HREESUMMARY <summary id="request-metadata"><span class="openapi-schema__container"><strong class="openapi-schema__property">metadata</strong><span class="openapi-schema__name"> object</span></span></summary>
HERESCHEMA {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}}
HEREOUTER <div class="openapi-tabs__schema-container"><div class="openapi-tabs__schema-tabs-container"><ul aria-orientation="horizontal" class="openapi-tabs__schema-list-container tabs openapi-tabs__schema" role="tablist"><li aria-selected="true" class="tabs__item openapi-tabs__schema-item active" role="tab" tabindex="0"><span class="openapi-tabs__schema-label">Schema</span></li><li aria-selected="false" class="tabs__item openapi-tabs__schema-item" role="tab" tabindex="-1"><span class="openapi-tabs__schema-label">Example (auto)</span></li></ul></div><div class="margin-top--md"><div class="tabItem_Ymn6" role="tabpanel"><details class="details_lb9f isBrowser_bmU9 alert alert--info details_b_Ee openapi-markdown__details response" data-collapsed="false" open=""><summary><strong class="openapi-markdown__details-summary-response">Schema</strong></summary><div style="display: block; overflow: visible; height: auto;"><div class="collapsibleContent_i85q"><div style="text-align: left; margin-left: 1rem;"></div><ul style="margin-left: 1rem;"><div id="response-run"><div class="openapi-schema__list-item"><details class="details_lb9f isBrowser_bmU9 alert alert--info details_b_Ee openapi-markdown__details" data-collapsed="true"><summary id="response-run"><span class="openapi-schema__container"><strong class="openapi-schema__property">run</strong><span class="openapi-schema__name"> object</span></span></summary><div style="display: none; overflow: hidden; height: 0px;"><div class="collapsibleContent_i85q"><div style="margin-left: 1rem;"><div style="margin-top: 0.5rem; margin-bottom: 0.5rem;"><p>The run information.</p></div><div id="response-run-agent-id"><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">agent_id</strong><span class="openapi-schema__name">Agent Id (string)</span><span class="openapi-schema__divider"></span><span class="openapi-schema__required">required</span></span><p>The ID of the agent to run.</p></div></div></div><div id="response-run-input"><div class="openapi-schema__list-item"><details class="details_lb9f isBrowser_bmU9 alert alert--info details_b_Ee openapi-markdown__details" data-collapsed="true"><summary id="response-run-input"><span class="openapi-schema__container"><strong class="openapi-schema__property">input</strong><span class="openapi-schema__name"> object</span></span></summary><div style="display: none; overflow: hidden; height: 0px;"><div class="collapsibleContent_i85q"><div style="margin-left: 1rem;"><div style="margin-top: 0.5rem; margin-bottom: 0.5rem;"><p>The input to the agent.</p></div><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">property</strong><span class="openapi-schema__name">any</span></span><p>The input to the agent.</p></div></div></div></div></div></details></div></div><div id="response-run-messages"><div class="openapi-schema__list-item"><details class="details_lb9f isBrowser_bmU9 alert alert--info details_b_Ee openapi-markdown__details" data-collapsed="true"><summary id="response-run-messages"><span class="openapi-schema__container"><strong class="openapi-schema__property">messages</strong><span class="openapi-schema__name"> object[]</span></span></summary><div style="display: none; overflow: hidden; height: 0px;"><div class="collapsibleContent_i85q"><div style="margin-left: 1rem;"><div style="margin-top: 0.5rem; margin-bottom: 0.5rem;"><p>The messages to pass an input to the agent.</p></div><li><div style="font-size: var(--ifm-code-font-size); opacity: 0.6; margin-left: -0.5rem; padding-bottom: 0.5rem;">Array [</div></li><div id="response-run-messages-role"><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">role</strong><span class="openapi-schema__name">Role (string)</span></span><p>The role of the message.</p><div><strong>Example: </strong><span><code>USER</code></span></div></div></div></div><div id="response-run-messages-content"><div class="openapi-schema__list-item"><details class="details_lb9f isBrowser_bmU9 alert alert--info details_b_Ee openapi-markdown__details" data-collapsed="true"><summary id="response-run-messages-content"><span class="openapi-schema__container"><strong class="openapi-schema__property">content</strong><span class="openapi-schema__name"> object[]</span></span></summary><div style="display: none; overflow: hidden; height: 0px;"><div class="collapsibleContent_i85q"><div style="margin-left: 1rem;"><div style="margin-top: 0.5rem; margin-bottom: 0.5rem;"><p>The content of the message.</p></div><li><div style="font-size: var(--ifm-code-font-size); opacity: 0.6; margin-left: -0.5rem; padding-bottom: 0.5rem;">Array [</div></li><div id="response-run-messages-content-text"><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">text</strong><span class="openapi-schema__name">string</span><span class="openapi-schema__divider"></span><span class="openapi-schema__required">required</span></span></div></div></div><div id="response-run-messages-content-type"><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">type</strong><span class="openapi-schema__name">ContentType (string)</span><span class="openapi-schema__divider"></span><span class="openapi-schema__required">required</span></span><p><strong>Possible values:</strong> [<code>text</code>]</p></div></div></div><li><div style="font-size: var(--ifm-code-font-size); opacity: 0.6; margin-left: -0.5rem;">]</div></li></div></div></div></details></div></div><li><div style="font-size: var(--ifm-code-font-size); opacity: 0.6; margin-left: -0.5rem;">]</div></li></div></div></div></details></div></div><div id="response-run-metadata"><div class="openapi-schema__list-item"><details class="details_lb9f isBrowser_bmU9 alert alert--info details_b_Ee openapi-markdown__details" data-collapsed="true"><summary id="response-run-metadata"><span class="openapi-schema__container"><strong class="openapi-schema__property">metadata</strong><span class="openapi-schema__name"> object</span></span></summary><div style="display: none; overflow: hidden; height: 0px;"><div class="collapsibleContent_i85q"><div style="margin-left: 1rem;"><div style="margin-top: 0.5rem; margin-bottom: 0.5rem;"><p>The metadata to pass to the agent.</p></div><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">property</strong><span class="openapi-schema__name">any</span></span><p>The metadata to pass to the agent.</p></div></div></div></div></div></details></div></div><div id="response-run-status"><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">status</strong><span class="openapi-schema__name">AgentExecutionStatus (string)</span></span><p>The status of the run. One of 'error', 'success'.</p><p><strong>Possible values:</strong> [<code>error</code>, <code>success</code>]</p></div></div></div></div></div></div></details></div></div><div id="response-messages"><div class="openapi-schema__list-item"><details class="details_lb9f isBrowser_bmU9 alert alert--info details_b_Ee openapi-markdown__details" data-collapsed="true"><summary id="response-messages"><span class="openapi-schema__container"><strong class="openapi-schema__property">messages</strong><span class="openapi-schema__name"> object[]</span></span></summary><div style="display: none; overflow: hidden; height: 0px;"><div class="collapsibleContent_i85q"><div style="margin-left: 1rem;"><div style="margin-top: 0.5rem; margin-bottom: 0.5rem;"><p>The messages returned by the run.</p></div><li><div style="font-size: var(--ifm-code-font-size); opacity: 0.6; margin-left: -0.5rem; padding-bottom: 0.5rem;">Array [</div></li><div id="response-messages-role"><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">role</strong><span class="openapi-schema__name">Role (string)</span></span><p>The role of the message.</p><div><strong>Example: </strong><span><code>USER</code></span></div></div></div></div><div id="response-messages-content"><div class="openapi-schema__list-item"><details class="details_lb9f isBrowser_bmU9 alert alert--info details_b_Ee openapi-markdown__details" data-collapsed="true"><summary id="response-messages-content"><span class="openapi-schema__container"><strong class="openapi-schema__property">content</strong><span class="openapi-schema__name"> object[]</span></span></summary><div style="display: none; overflow: hidden; height: 0px;"><div class="collapsibleContent_i85q"><div style="margin-left: 1rem;"><div style="margin-top: 0.5rem; margin-bottom: 0.5rem;"><p>The content of the message.</p></div><li><div style="font-size: var(--ifm-code-font-size); opacity: 0.6; margin-left: -0.5rem; padding-bottom: 0.5rem;">Array [</div></li><div id="response-messages-content-text"><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">text</strong><span class="openapi-schema__name">string</span><span class="openapi-schema__divider"></span><span class="openapi-schema__required">required</span></span></div></div></div><div id="response-messages-content-type"><div class="openapi-schema__list-item"><div><span class="openapi-schema__container"><strong class="openapi-schema__property">type</strong><span class="openapi-schema__name">ContentType (string)</span><span class="openapi-schema__divider"></span><span class="openapi-schema__required">required</span></span><p><strong>Possible values:</strong> [<code>text</code>]</p></div></div></div><li><div style="font-size: var(--ifm-code-font-size); opacity: 0.6; margin-left: -0.5rem;">]</div></li></div></div></div></details></div></div><li><div style="font-size: var(--ifm-code-font-size); opacity: 0.6; margin-left: -0.5rem;">]</div></li></div></div></div></details></div></div></ul></div></div></details></div><div class="tabItem_Ymn6" hidden="" role="tabpanel"><div class="openapi-code__code-samples-container"><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #393A34; --prism-background-color: #f6f8fa;"><div class="codeBlockContent_QJqH"><pre class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color: rgb(57, 58, 52); background-color: rgb(246, 248, 250);" tabindex="0"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token punctuation" style="color: rgb(57, 58, 52);">{</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">  </span><span class="token property" style="color: rgb(54, 172, 170);">"run"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(57, 58, 52);">{</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">    </span><span class="token property" style="color: rgb(54, 172, 170);">"agent_id"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(227, 17, 108);">"string"</span><span class="token punctuation" style="color: rgb(57, 58, 52);">,</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">    </span><span class="token property" style="color: rgb(54, 172, 170);">"input"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(57, 58, 52);">{</span><span class="token punctuation" style="color: rgb(57, 58, 52);">}</span><span class="token punctuation" style="color: rgb(57, 58, 52);">,</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">    </span><span class="token property" style="color: rgb(54, 172, 170);">"messages"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(57, 58, 52);">[</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">      </span><span class="token punctuation" style="color: rgb(57, 58, 52);">{</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">        </span><span class="token property" style="color: rgb(54, 172, 170);">"role"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(227, 17, 108);">"USER"</span><span class="token punctuation" style="color: rgb(57, 58, 52);">,</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">        </span><span class="token property" style="color: rgb(54, 172, 170);">"content"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(57, 58, 52);">[</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">          </span><span class="token punctuation" style="color: rgb(57, 58, 52);">{</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">            </span><span class="token property" style="color: rgb(54, 172, 170);">"text"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(227, 17, 108);">"string"</span><span class="token punctuation" style="color: rgb(57, 58, 52);">,</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">            </span><span class="token property" style="color: rgb(54, 172, 170);">"type"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(227, 17, 108);">"text"</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">          </span><span class="token punctuation" style="color: rgb(57, 58, 52);">}</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">        </span><span class="token punctuation" style="color: rgb(57, 58, 52);">]</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">      </span><span class="token punctuation" style="color: rgb(57, 58, 52);">}</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(57, 58, 52);">]</span><span class="token punctuation" style="color: rgb(57, 58, 52);">,</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">    </span><span class="token property" style="color: rgb(54, 172, 170);">"metadata"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(57, 58, 52);">{</span><span class="token punctuation" style="color: rgb(57, 58, 52);">}</span><span class="token punctuation" style="color: rgb(57, 58, 52);">,</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">    </span><span class="token property" style="color: rgb(54, 172, 170);">"status"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(227, 17, 108);">"error"</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(57, 58, 52);">}</span><span class="token punctuation" style="color: rgb(57, 58, 52);">,</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">  </span><span class="token property" style="color: rgb(54, 172, 170);">"messages"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(57, 58, 52);">[</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(57, 58, 52);">{</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">      </span><span class="token property" style="color: rgb(54, 172, 170);">"role"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(227, 17, 108);">"USER"</span><span class="token punctuation" style="color: rgb(57, 58, 52);">,</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">      </span><span class="token property" style="color: rgb(54, 172, 170);">"content"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(57, 58, 52);">[</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">        </span><span class="token punctuation" style="color: rgb(57, 58, 52);">{</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">          </span><span class="token property" style="color: rgb(54, 172, 170);">"text"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(227, 17, 108);">"string"</span><span class="token punctuation" style="color: rgb(57, 58, 52);">,</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">          </span><span class="token property" style="color: rgb(54, 172, 170);">"type"</span><span class="token operator" style="color: rgb(57, 58, 52);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(227, 17, 108);">"text"</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">        </span><span class="token punctuation" style="color: rgb(57, 58, 52);">}</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">      </span><span class="token punctuation" style="color: rgb(57, 58, 52);">]</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(57, 58, 52);">}</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(57, 58, 52);">]</span><span class="token plain"></span><br/></span><span class="token-line" style="color: rgb(57, 58, 52);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(57, 58, 52);">}</span><br/></span></code></pre><div class="buttonGroup_M5ko"><button aria-label="Copy code to clipboard" class="clean-btn" title="Copy" type="button"><span aria-hidden="true" class="copyButtonIcons_IEyt"><svg class="copyButtonIcon_TrPX" viewbox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" fill="currentColor"></path></svg><svg class="copyButtonSuccessIcon_cVMy" viewbox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" fill="currentColor"></path></svg></span></button></div></div></div></div></div></div></div>
HREESUMMARY <summary><strong class="openapi-markdown__details-summary-response">Schema</strong></summary>
HREESUMMARY <summary id="response-run"><span class="openapi-schema__container"><strong class="openapi-schema__property">run</strong><span class="openapi-schema__name"> object</span></span></summary>
HREESUMMARY <summary id="response-run-input"><span class="openapi-schema__container"><strong class="openapi-schema__property">input</strong><span class="openapi-schema__name"> object</span></span></summary>
HREESUMMARY <summary id="response-run-messages"><span class="openapi-schema__container"><strong class="openapi-schema__property">messages</strong><span class="openapi-schema__name"> object[]</span></span></summary>
HREESUMMARY <summary id="response-run-messages-content"><span class="openapi-schema__container"><strong class="openapi-schema__property">content</strong><span class="openapi-schema__name"> object[]</span></span></summary>
HREESUMMARY <summary id="response-run-metadata"><span class="openapi-schema__container"><strong class="openapi-schema__property">metadata</strong><span class="openapi-schema__name"> object</span></span></summary>
HREESUMMARY <summary id="response-messages"><span class="openapi-schema__container"><strong class="openapi-schema__property">messages</strong><span class="openapi-schema__name"> object[]</span></span></summary>
HREESUMMARY <summary id="response-messages-content"><span class="openapi-schema__container"><strong class="openapi-schema__property">content</strong><span class="openapi-schema__name"> object[]</span></span></summary>
HERESCHEMA {'run': {'type': 'object', 'description': 'The run information.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}, 'status': {'type': 'AgentExecutionStatus (string)', 'description': "The status of the run. One of 'error', 'success'.\n\nPossible values: `error`, `success`", 'required': False}}}, 'messages': {'type': 'object[]', 'description': 'The messages returned by the run.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}}
HEREREQUEST {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}}
HERERESPONSE {'run': {'type': 'object', 'description': 'The run information.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}, 'status': {'type': 'AgentExecutionStatus (string)', 'description': "The status of the run. One of 'error', 'success'.\n\nPossible values: `error`, `success`", 'required': False}}}, 'messages': {'type': 'object[]', 'description': 'The messages returned by the run.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}}
HERE {'title': 'Create an agent run and wait for the response', 'url': 'https://developers.glean.com/api/client-api/agents/create-and-wait-run', 'authentication': 'Authorization: http', 'request_schema': {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}}, 'response_schema': {'run': {'type': 'object', 'description': 'The run information.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}, 'status': {'type': 'AgentExecutionStatus (string)', 'description': "The status of the run. One of 'error', 'success'.\n\nPossible values: `error`, `success`", 'required': False}}}, 'messages': {'type': 'object[]', 'description': 'The messages returned by the run.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}}, 'request_mime_type': 'application/json', 'response_mime_type': 'application/json', 'python_code_sample': 'from glean.api_client import Glean\nimport os\nwith Glean(\n    api_token=os.getenv("GLEAN_API_TOKEN", ""),\n    instance=os.getenv("GLEAN_INSTANCE", ""),\n) as glean:\n    res = glean.client.agents.run(agent_id="<id>", messages=[\n        {\n            "role": "USER",\n        },\n    ])\n    # Handle response\n    print(res)', 'go_code_sample': 'package main\nimport(\n\t"context"\n\t"os"\n\tapiclientgo "github.com/gleanwork/api-client-go"\n\t"github.com/gleanwork/api-client-go/models/components"\n\t"log"\n)\nfunc main() {\n    ctx := context.Background()\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv("GLEAN_API_TOKEN")),\n        apiclientgo.WithInstance(os.Getenv("GLEAN_INSTANCE")),\n    )\n    res, err := s.Client.Agents.Run(ctx, components.AgentRunCreate{\n        AgentID: "<id>",\n        Messages: []components.Message{\n            components.Message{\n                Role: apiclientgo.String("USER"),\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.AgentRunWaitResponse != nil {\n        // handle response\n    }\n}', 'java_code_sample': 'package hello.world;\nimport java.lang.Exception;\nimport java.util.List;\nimport org.openapis.openapi.Glean;\nimport org.openapis.openapi.models.components.AgentRunCreate;\nimport org.openapis.openapi.models.components.Message;\nimport org.openapis.openapi.models.operations.CreateAndWaitRunResponse;\npublic class Application {\n    public static void main(String[] args) throws Exception {\n        Glean sdk = Glean.builder()\n                .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))\n            .build();\n        AgentRunCreate req = AgentRunCreate.builder()\n                .agentId("<id>")\n                .messages(List.of(\n                    Message.builder()\n                        .role("USER")\n                        .build()))\n                .build();\n        CreateAndWaitRunResponse res = sdk.client().agents().run()\n                .request(req)\n                .call();\n        if (res.agentRunWaitResponse().isPresent()) {\n            // handle response\n        }\n    }\n}', 'typescript_code_sample': 'import { Glean } from "@gleanwork/api-client";\nconst glean = new Glean({\n  apiToken: process.env["GLEAN_API_TOKEN"] ?? "",\n  instance: process.env["GLEAN_INSTANCE"] ?? "",\n});\nasync function run() {\n  const result = await glean.client.agents.run({\n    agentId: "<id>",\n    messages: [\n      {\n        role: "USER",\n      },\n    ],\n  });\n  // Handle the result\n  console.log(result);\n}\nrun();', 'curl_code_sample': 'curl -L \'https://instance-name-be.glean.com/rest/api/v1/agents/runs/wait\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Accept: application/json\' \\\n-H \'Authorization: Bearer <token>\' \\\n-d \'{\n  "agent_id": "string",\n  "input": {},\n  "messages": [\n    {\n      "role": "USER",\n      "content": [\n        {\n          "text": "string",\n          "type": "text"\n        }\n      ]\n    }\n  ],\n  "metadata": {}\n}\''}
Successfully scraped 4 APIs
HEREAPI {'title': 'Report document activity', 'url': 'https://developers.glean.com/api/client-api/activity/activity', 'authentication': 'Authorization: http', 'request_schema': {'events': {'type': 'ActivityEvent[]', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': True, 'is_array': True, 'properties': {'id': {'type': 'string', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': False}, 'action': {'type': 'string', 'description': "The type of activity this represents.\n\nVIEW: Represents a visit to the givenurl.\nEDIT: Represents an edit of the document represented by theurl.\nSEARCH: Represents a search performed at the givenurl.\nCOMMENT: Represents a comment on the document represented by theurl.\nCRAWL: Represents an explicit request to index the givenurlalong with associated attributes in this payload.\nHISTORICAL_SEARCH: Represents a search performed at the givenurlas indicated by the user's history.\nHISTORICAL_VIEW: Represents a visit to the givenurlas indicated by the user's history.\n\nPossible values: `VIEW`, `EDIT`, `SEARCH`, `COMMENT`, `CRAWL`, `HISTORICAL_SEARCH`, `HISTORICAL_VIEW`", 'required': True}, 'params': {'type': 'ActivityEventParams', 'description': 'The HTML content of the page body.', 'required': False, 'is_array': False, 'properties': {'bodyContent': {'type': 'string', 'description': 'The HTML content of the page body.', 'required': False}, 'datasourceInstance': {'type': 'string', 'description': 'The full datasource instance name inferred from the URL of the event', 'required': False}, 'datasource': {'type': 'string', 'description': 'The datasource without the instance inferred from the URL of the event', 'required': False}, 'instanceOnlyName': {'type': 'string', 'description': 'The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event', 'required': False}, 'duration': {'type': 'integer', 'description': 'Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.', 'required': False}, 'query': {'type': 'string', 'description': "The user's search query associated with a SEARCH.", 'required': False}, 'referrer': {'type': 'string', 'description': 'The referring URL of the VIEW or SEARCH.', 'required': False}, 'title': {'type': 'string', 'description': 'The page title associated with the URL of the event', 'required': False}, 'truncated': {'type': 'boolean', 'description': 'Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when aVIEWis finished.', 'required': False}}}, 'timestamp': {'type': 'string<date-time>', 'description': 'The ISO 8601 timestamp when the activity began.', 'required': True}, 'url': {'type': 'string', 'description': 'The URL of the activity.', 'required': True}}}}, 'response_schema': {}, 'request_mime_type': 'application/json', 'response_mime_type': '', 'python_code_sample': 'from glean.api_client import Glean, models\nfrom glean.api_client.utils import parse_datetime\nimport os\nwith Glean(\n    api_token=os.getenv("GLEAN_API_TOKEN", ""),\n    instance=os.getenv("GLEAN_INSTANCE", ""),\n) as glean:\n    glean.client.activity.report(events=[\n        {\n            "action": models.ActivityEventAction.HISTORICAL_VIEW,\n            "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),\n            "url": "https://example.com/",\n        },\n        {\n            "action": models.ActivityEventAction.SEARCH,\n            "params": {\n                "query": "query",\n            },\n            "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),\n            "url": "https://example.com/search?q=query",\n        },\n        {\n            "action": models.ActivityEventAction.VIEW,\n            "params": {\n                "duration": 20,\n                "referrer": "https://example.com/document",\n            },\n            "timestamp": parse_datetime("2000-01-23T04:56:07.000Z"),\n            "url": "https://example.com/",\n        },\n    ])\n    # Use the SDK ...', 'go_code_sample': 'package main\nimport(\n\t"context"\n\t"os"\n\tapiclientgo "github.com/gleanwork/api-client-go"\n\t"github.com/gleanwork/api-client-go/models/components"\n\t"github.com/gleanwork/api-client-go/types"\n\t"log"\n)\nfunc main() {\n    ctx := context.Background()\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv("GLEAN_API_TOKEN")),\n        apiclientgo.WithInstance(os.Getenv("GLEAN_INSTANCE")),\n    )\n    res, err := s.Client.Activity.Report(ctx, components.Activity{\n        Events: []components.ActivityEvent{\n            components.ActivityEvent{\n                Action: components.ActivityEventActionHistoricalView,\n                Timestamp: types.MustTimeFromString("2000-01-23T04:56:07.000Z"),\n                URL: "https://example.com/",\n            },\n            components.ActivityEvent{\n                Action: components.ActivityEventActionSearch,\n                Params: &components.ActivityEventParams{\n                    Query: apiclientgo.String("query"),\n                },\n                Timestamp: types.MustTimeFromString("2000-01-23T04:56:07.000Z"),\n                URL: "https://example.com/search?q=query",\n            },\n            components.ActivityEvent{\n                Action: components.ActivityEventActionView,\n                Params: &components.ActivityEventParams{\n                    Duration: apiclientgo.Int64(20),\n                    Referrer: apiclientgo.String("https://example.com/document"),\n                },\n                Timestamp: types.MustTimeFromString("2000-01-23T04:56:07.000Z"),\n                URL: "https://example.com/",\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}', 'java_code_sample': 'package hello.world;\nimport java.lang.Exception;\nimport java.time.OffsetDateTime;\nimport java.util.List;\nimport org.openapis.openapi.Glean;\nimport org.openapis.openapi.models.components.*;\nimport org.openapis.openapi.models.operations.ActivityResponse;\npublic class Application {\n    public static void main(String[] args) throws Exception {\n        Glean sdk = Glean.builder()\n                .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))\n            .build();\n        Activity req = Activity.builder()\n                .events(List.of(\n                    ActivityEvent.builder()\n                        .action(ActivityEventAction.HISTORICAL_VIEW)\n                        .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))\n                        .url("https://example.com/")\n                        .build(),\n                    ActivityEvent.builder()\n                        .action(ActivityEventAction.SEARCH)\n                        .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))\n                        .url("https://example.com/search?q=query")\n                        .params(ActivityEventParams.builder()\n                            .query("query")\n                            .build())\n                        .build(),\n                    ActivityEvent.builder()\n                        .action(ActivityEventAction.VIEW)\n                        .timestamp(OffsetDateTime.parse("2000-01-23T04:56:07.000Z"))\n                        .url("https://example.com/")\n                        .params(ActivityEventParams.builder()\n                            .duration(20L)\n                            .referrer("https://example.com/document")\n                            .build())\n                        .build()))\n                .build();\n        ActivityResponse res = sdk.client().activity().report()\n                .request(req)\n                .call();\n        // handle response\n    }\n}', 'typescript_code_sample': 'import { Glean } from "@gleanwork/api-client";\nconst glean = new Glean({\n  apiToken: process.env["GLEAN_API_TOKEN"] ?? "",\n  instance: process.env["GLEAN_INSTANCE"] ?? "",\n});\nasync function run() {\n  await glean.client.activity.report({\n    events: [\n      {\n        action: "HISTORICAL_VIEW",\n        timestamp: new Date("2000-01-23T04:56:07.000Z"),\n        url: "https://example.com/",\n      },\n      {\n        action: "SEARCH",\n        params: {\n          query: "query",\n        },\n        timestamp: new Date("2000-01-23T04:56:07.000Z"),\n        url: "https://example.com/search?q=query",\n      },\n      {\n        action: "VIEW",\n        params: {\n          duration: 20,\n          referrer: "https://example.com/document",\n        },\n        timestamp: new Date("2000-01-23T04:56:07.000Z"),\n        url: "https://example.com/",\n      },\n    ],\n  });\n}\nrun();', 'curl_code_sample': 'curl -L \'https://instance-name-be.glean.com/rest/api/v1/activity\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Authorization: Bearer <token>\' \\\n-d \'{\n  "events": [\n    {\n      "url": "https://example.com/",\n      "action": "HISTORICAL_VIEW",\n      "timestamp": "2000-01-23T04:56:07.000Z"\n    },\n    {\n      "url": "https://example.com/search?q=query",\n      "action": "SEARCH",\n      "timestamp": "2000-01-23T04:56:07.000Z",\n      "params": {\n        "query": "query"\n      }\n    },\n    {\n      "url": "https://example.com/",\n      "action": "VIEW",\n      "timestamp": "2000-01-23T04:56:07.000Z",\n      "params": {\n        "duration": 20,\n        "referrer": "https://example.com/document"\n      }\n    }\n  ]\n}\''}
HEREAPI {'title': 'Report client activity', 'url': 'https://developers.glean.com/api/client-api/activity/feedback', 'authentication': 'Authorization: http', 'request_schema': {'id': {'type': 'string', 'description': 'Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.', 'required': False}, 'category': {'type': 'string', 'description': 'The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.\n\nPossible values: `ANNOUNCEMENT`, `AUTOCOMPLETE`, `COLLECTIONS`, `FEED`, `SEARCH`, `CHAT`, `NTP`, `WORKFLOWS`, `SUMMARY`, `GENERAL`, `PROMPTS`', 'required': False}, 'trackingTokens': {'type': 'string[]', 'description': 'A list of server-generated trackingTokens to which this event applies.', 'required': True}, 'event': {'type': 'string', 'description': "The action the user took within a Glean client with respect to the object referred to by the giventrackingToken.\n\nCLICK: The object's primary link was clicked with the intent to view its full representation. Depending on the object type, this may imply an external navigation or navigating to a new page or view within the Glean app.\nCONTAINER_CLICK: A link to the object's parent container (e.g. the folder in which it's located) was clicked.\nCOPY_LINK: The user copied a link to the primary link.\nCREATE: The user creates a document.\nDISMISS: The user dismissed the object such that it was hidden from view.\nDOWNVOTE: The user gave feedback that the object was not useful.\nEMAIL: The user attempted to send an email.\nEXECUTE: The user executed the object (e.g. ran a workflow).\nFILTER: The user applied a filter.\nFIRST_TOKEN: The first token of a streaming response is received.\nFOCUS_IN: The user clicked into an interactive element, e.g. the search box.\nLAST_TOKEN: The final token of a streaming response is received.\nMANUAL_FEEDBACK: The user submitted textual manual feedback regarding the object.\nMARK_AS_READ: The user explicitly marked the content as read.\nMESSAGE: The user attempted to send a message using their default messaing app.\nMIDDLE_CLICK: The user middle clicked the object's primary link with the intent to open its full representation in a new tab.\nPAGE_BLUR: The user puts a page out of focus but keeps it in the background.\nPAGE_FOCUS: The user puts a page in focus, meaning it is the first to receive keyboard events.\nPAGE_LEAVE: The user leaves a page and it is unloaded (by clicking a link, closing the tab/window, etc).\nPREVIEW: The user clicked the object's inline preview affordance.\nRIGHT_CLICK: The user right clicked the object's primary link. This may indicate an intent to open it in a new tab or copy it.\nSECTION_CLICK: The user clicked a link to a subsection of the primary object.\nSEEN: The user has likely seen the object (e.g. took action to make the object visible within the user's viewport).\nSHARE: The user shared the object with another user.\nSHOW_MORE: The user clicked the object's show more affordance.\nUPVOTE: The user gave feedback that the object was useful.\nVIEW: The object was visible within the user's viewport.\nVISIBLE: The object was visible within the user's viewport.\n\nPossible values: `CLICK`, `CONTAINER_CLICK`, `COPY_LINK`, `CREATE`, `DISMISS`, `DOWNVOTE`, `EMAIL`, `EXECUTE`, `FILTER`, `FIRST_TOKEN`, `FOCUS_IN`, `LAST_TOKEN`, `MANUAL_FEEDBACK`, `MARK_AS_READ`, `MESSAGE`, `MIDDLE_CLICK`, `PAGE_BLUR`, `PAGE_FOCUS`, `PAGE_LEAVE`, `PREVIEW`, `RELATED_CLICK`, `RIGHT_CLICK`, `SECTION_CLICK`, `SEEN`, `SHARE`, `SHOW_MORE`, `UPVOTE`, `VIEW`, `VISIBLE`", 'required': True}, 'position': {'type': 'integer', 'description': 'Position of the element in the case that the client controls order (such as feed and autocomplete).', 'required': False}, 'payload': {'type': 'string', 'description': 'For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content.', 'required': False}, 'sessionInfo': {'type': 'SessionInfo', 'description': "A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.", 'required': False, 'is_array': False, 'properties': {'sessionTrackingToken': {'type': 'string', 'description': "A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.", 'required': False}, 'tabId': {'type': 'string', 'description': 'A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.', 'required': False}, 'lastSeen': {'type': 'string<date-time>', 'description': 'The last time the server saw this token.', 'required': False}, 'lastQuery': {'type': 'string', 'description': 'The last query seen by the server.', 'required': False}}}, 'timestamp': {'type': 'string<date-time>', 'description': 'The ISO 8601 timestamp when the event occured.', 'required': False}, 'user': {'type': 'User', 'description': 'An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).', 'required': False, 'is_array': False, 'properties': {'userID': {'type': 'string', 'description': 'An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).', 'required': False}, 'origID': {'type': 'string', 'description': 'An opaque user ID for the authenticated user (ignores actas).', 'required': False}}}, 'pathname': {'type': 'string', 'description': 'The path the client was at when the feedback event triggered.', 'required': False}, 'channels': {'type': 'string[]', 'description': "Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean.\n\nPossible values: `COMPANY`, `GLEAN`", 'required': False}, 'url': {'type': 'string', 'description': 'The URL the client was at when the feedback event triggered.', 'required': False}, 'uiTree': {'type': 'string[]', 'description': 'The UI element tree associated with the event, if any.', 'required': False}, 'uiElement': {'type': 'string', 'description': 'The UI element associated with the event, if any.', 'required': False}, 'manualFeedbackInfo': {'type': 'ManualFeedbackInfo', 'description': 'The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.', 'required': False, 'is_array': True, 'properties': {'email': {'type': 'string', 'description': 'The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.', 'required': False}, 'source': {'type': 'string', 'description': 'The source associated with the Feedback.event.MANUAL_FEEDBACK event.\n\nPossible values: `AUTOCOMPLETE`, `CALENDAR`, `CHAT`, `CHAT_GENERAL`, `CONCEPT_CARD`, `DESKTOP_APP`, `DISAMBIGUATION_CARD`, `EXPERT_DETECTION`, `FEED`, `GENERATED_Q_AND_A`, `INLINE_MENU`, `NATIVE_RESULT`, `Q_AND_A`, `RELATED_QUESTIONS`, `REPORT_ISSUE`, `SCIOBOT`, `SEARCH`, `SIDEBAR`, `SUMMARY`', 'required': False}, 'issue': {'type': 'string', 'description': 'The issue the user indicated in the feedback.', 'required': False}, 'issues': {'type': 'string[]', 'description': 'The issue(s) the user indicated in the feedback.\n\nPossible values: `INACCURATE_RESPONSE`, `INCOMPLETE_OR_NO_ANSWER`, `INCORRECT_CITATION`, `MISSING_CITATION`, `OTHER`, `OUTDATED_RESPONSE`, `RESULT_MISSING`, `RESULT_SHOULD_NOT_APPEAR`, `RESULTS_HELPFUL`, `RESULTS_POOR_ORDER`, `TOO_MUCH_ONE_KIND`', 'required': False}, 'imageUrls': {'type': 'string[]', 'description': 'URLs of images uploaded by user when providing feedback', 'required': False}, 'query': {'type': 'string', 'description': 'The query associated with the Feedback.event.MANUAL_FEEDBACK event.', 'required': False}, 'obscuredQuery': {'type': 'string', 'description': 'The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.', 'required': False}, 'activeTab': {'type': 'string', 'description': 'Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.', 'required': False}, 'comments': {'type': 'string', 'description': 'The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.', 'required': False}, 'searchResults': {'type': 'string[]', 'description': 'The array of search result Glean Document IDs, ordered by top to bottom result.', 'required': False}, 'previousMessages': {'type': 'string[]', 'description': 'The array of previous messages in a chat session, ordered by oldest to newest.', 'required': False}, 'chatTranscript': {'type': 'FeedbackChatExchange[]', 'description': 'Array of previous request/response exchanges, ordered by oldest to newest.', 'required': False, 'is_array': True, 'properties': {'timestamp': {'type': 'integer<int64>', 'description': 'Unix timestamp in millis for the chat request.', 'required': False}, 'agent': {'type': 'string', 'description': 'Either DEFAULT (company knowledge) or GPT (world knowledge).', 'required': False}, 'userQuery': {'type': 'string', 'description': 'Initial query entered by the user.', 'required': False}, 'searchQuery': {'type': 'string', 'description': 'Search query performed by the agent.', 'required': False}, 'resultDocuments': {'type': 'undefined[]', 'description': 'List of documents read by the agent.', 'required': False, 'is_array': True, 'properties': {'title': {'type': 'string', 'description': 'titlestring', 'required': False}, 'url': {'type': 'string', 'description': 'urlstring', 'required': False}}}, 'response': {'type': 'string', 'description': 'responsestring', 'required': False}}}, 'numQueriesFromFirstRun': {'type': 'integer', 'description': 'How many times this query has been run in the past.', 'required': False}, 'vote': {'type': 'string', 'description': 'The vote associated with the Feedback.event.MANUAL_FEEDBACK event.\n\nPossible values: `UPVOTE`, `DOWNVOTE`', 'required': False}, 'rating': {'type': 'integer', 'description': 'A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.', 'required': False}, 'ratingKey': {'type': 'string', 'description': 'A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".', 'required': False}, 'ratingScale': {'type': 'integer', 'description': 'The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.', 'required': False}}}, 'seenFeedbackInfo': {'type': 'SeenFeedbackInfo', 'description': 'The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.', 'required': False, 'is_array': False, 'properties': {'isExplicit': {'type': 'boolean', 'description': 'The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.', 'required': False}}}, 'userViewInfo': {'type': 'UserViewInfo', 'description': 'Unique Glean Document ID of the associated document.', 'required': False, 'is_array': False, 'properties': {'docId': {'type': 'string', 'description': 'Unique Glean Document ID of the associated document.', 'required': False}, 'docTitle': {'type': 'string', 'description': 'Title of associated document.', 'required': False}, 'docUrl': {'type': 'string', 'description': 'URL of associated document.', 'required': False}}}, 'workflowFeedbackInfo': {'type': 'WorkflowFeedbackInfo', 'description': 'Where the feedback of the workflow originated from\n\nPossible values: `ZERO_STATE`, `LIBRARY`, `HOMEPAGE`', 'required': False, 'is_array': False, 'properties': {'source': {'type': 'string', 'description': 'Where the feedback of the workflow originated from\n\nPossible values: `ZERO_STATE`, `LIBRARY`, `HOMEPAGE`', 'required': False}}}, 'applicationId': {'type': 'string', 'description': 'The application ID of the client that sent the feedback event.', 'required': False}, 'agentId': {'type': 'string', 'description': 'The agent ID of the client that sent the feedback event.', 'required': False}}, 'response_schema': {}, 'request_mime_type': 'application/json', 'response_mime_type': '', 'python_code_sample': 'from glean.api_client import Glean, models\nimport os\nwith Glean(\n    api_token=os.getenv("GLEAN_API_TOKEN", ""),\n    instance=os.getenv("GLEAN_INSTANCE", ""),\n) as glean:\n    glean.client.activity.feedback(feedback1={\n        "tracking_tokens": [\n            "trackingTokens",\n        ],\n        "event": models.Event.VIEW,\n    })\n    # Use the SDK ...', 'go_code_sample': 'package main\nimport(\n\t"context"\n\t"os"\n\tapiclientgo "github.com/gleanwork/api-client-go"\n\t"github.com/gleanwork/api-client-go/models/components"\n\t"log"\n)\nfunc main() {\n    ctx := context.Background()\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv("GLEAN_API_TOKEN")),\n        apiclientgo.WithInstance(os.Getenv("GLEAN_INSTANCE")),\n    )\n    res, err := s.Client.Activity.Feedback(ctx, nil, &components.Feedback{\n        TrackingTokens: []string{\n            "trackingTokens",\n        },\n        Event: components.EventView,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}', 'java_code_sample': 'package hello.world;\nimport java.lang.Exception;\nimport java.util.List;\nimport org.openapis.openapi.Glean;\nimport org.openapis.openapi.models.components.Event;\nimport org.openapis.openapi.models.components.Feedback;\nimport org.openapis.openapi.models.operations.FeedbackResponse;\npublic class Application {\n    public static void main(String[] args) throws Exception {\n        Glean sdk = Glean.builder()\n                .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))\n            .build();\n        FeedbackResponse res = sdk.client().activity().feedback()\n                .feedback1(Feedback.builder()\n                    .trackingTokens(List.of(\n                        "trackingTokens"))\n                    .event(Event.VIEW)\n                    .build())\n                .call();\n        // handle response\n    }\n}', 'typescript_code_sample': 'import { Glean } from "@gleanwork/api-client";\nconst glean = new Glean({\n  apiToken: process.env["GLEAN_API_TOKEN"] ?? "",\n  instance: process.env["GLEAN_INSTANCE"] ?? "",\n});\nasync function run() {\n  await glean.client.activity.feedback({\n    trackingTokens: [\n      "trackingTokens",\n    ],\n    event: "VIEW",\n  });\n}\nrun();', 'curl_code_sample': 'curl -L \'https://instance-name-be.glean.com/rest/api/v1/feedback\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Authorization: Bearer <token>\' \\\n-d \'{\n  "trackingTokens": [\n    "trackingTokens"\n  ],\n  "event": "VIEW"\n}\''}
HEREAPI {'title': 'Create an agent run and stream the response', 'url': 'https://developers.glean.com/api/client-api/agents/create-and-stream-run', 'authentication': 'Authorization: http', 'request_schema': {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}}, 'response_schema': {}, 'request_mime_type': 'application/json', 'response_mime_type': 'text/event-stream', 'python_code_sample': 'from glean.api_client import Glean\nimport os\nwith Glean(\n    api_token=os.getenv("GLEAN_API_TOKEN", ""),\n    instance=os.getenv("GLEAN_INSTANCE", ""),\n) as glean:\n    res = glean.client.agents.run_stream(agent_id="<id>", messages=[\n        {\n            "role": "USER",\n        },\n    ])\n    # Handle response\n    print(res)', 'go_code_sample': 'package main\nimport(\n\t"context"\n\t"os"\n\tapiclientgo "github.com/gleanwork/api-client-go"\n\t"github.com/gleanwork/api-client-go/models/components"\n\t"log"\n)\nfunc main() {\n    ctx := context.Background()\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv("GLEAN_API_TOKEN")),\n        apiclientgo.WithInstance(os.Getenv("GLEAN_INSTANCE")),\n    )\n    res, err := s.Client.Agents.RunStream(ctx, components.AgentRunCreate{\n        AgentID: "<id>",\n        Messages: []components.Message{\n            components.Message{\n                Role: apiclientgo.String("USER"),\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Res != nil {\n        // handle response\n    }\n}', 'java_code_sample': 'package hello.world;\nimport java.lang.Exception;\nimport java.util.List;\nimport org.openapis.openapi.Glean;\nimport org.openapis.openapi.models.components.AgentRunCreate;\nimport org.openapis.openapi.models.components.Message;\nimport org.openapis.openapi.models.operations.CreateAndStreamRunResponse;\npublic class Application {\n    public static void main(String[] args) throws Exception {\n        Glean sdk = Glean.builder()\n                .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))\n            .build();\n        AgentRunCreate req = AgentRunCreate.builder()\n                .agentId("<id>")\n                .messages(List.of(\n                    Message.builder()\n                        .role("USER")\n                        .build()))\n                .build();\n        CreateAndStreamRunResponse res = sdk.client().agents().runStream()\n                .request(req)\n                .call();\n        if (res.res().isPresent()) {\n            // handle response\n        }\n    }\n}', 'typescript_code_sample': 'import { Glean } from "@gleanwork/api-client";\nconst glean = new Glean({\n  apiToken: process.env["GLEAN_API_TOKEN"] ?? "",\n  instance: process.env["GLEAN_INSTANCE"] ?? "",\n});\nasync function run() {\n  const result = await glean.client.agents.runStream({\n    agentId: "<id>",\n    messages: [\n      {\n        role: "USER",\n      },\n      {\n        role: "USER",\n      },\n      {\n        role: "USER",\n      },\n    ],\n  });\n  // Handle the result\n  console.log(result);\n}\nrun();', 'curl_code_sample': 'curl -L \'https://instance-name-be.glean.com/rest/api/v1/agents/runs/stream\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Accept: text/event-stream\' \\\n-H \'Authorization: Bearer <token>\' \\\n-d \'{\n  "agent_id": "string",\n  "input": {},\n  "messages": [\n    {\n      "role": "USER",\n      "content": [\n        {\n          "text": "string",\n          "type": "text"\n        }\n      ]\n    }\n  ],\n  "metadata": {}\n}\''}
HEREAPI {'title': 'Create an agent run and wait for the response', 'url': 'https://developers.glean.com/api/client-api/agents/create-and-wait-run', 'authentication': 'Authorization: http', 'request_schema': {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}}, 'response_schema': {'run': {'type': 'object', 'description': 'The run information.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'agent_id': {'type': 'Agent Id (string)', 'description': 'The ID of the agent to run.', 'required': True}, 'input': {'type': 'object', 'description': 'The input to the agent.', 'required': False, 'is_array': False}, 'messages': {'type': 'object[]', 'description': 'The messages to pass an input to the agent.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}, 'metadata': {'type': 'object', 'description': 'The metadata to pass to the agent.', 'required': False, 'is_array': False}, 'status': {'type': 'AgentExecutionStatus (string)', 'description': "The status of the run. One of 'error', 'success'.\n\nPossible values: `error`, `success`", 'required': False}}}, 'messages': {'type': 'object[]', 'description': 'The messages returned by the run.\n\nPossible values: `text`\n\nExample: `USER`', 'required': False, 'is_array': True, 'properties': {'role': {'type': 'Role (string)', 'description': 'The role of the message.\n\nExample: `USER`', 'required': False}, 'content': {'type': 'object[]', 'description': 'The content of the message.\n\nPossible values: `text`', 'required': False, 'is_array': True, 'properties': {'text': {'type': 'string', 'description': 'textstringrequired\n\nPossible values: `text`', 'required': True}, 'type': {'type': 'ContentType (string)', 'description': 'Possible values:[text]\n\nPossible values: `text`', 'required': True}}}}}}, 'request_mime_type': 'application/json', 'response_mime_type': 'application/json', 'python_code_sample': 'from glean.api_client import Glean\nimport os\nwith Glean(\n    api_token=os.getenv("GLEAN_API_TOKEN", ""),\n    instance=os.getenv("GLEAN_INSTANCE", ""),\n) as glean:\n    res = glean.client.agents.run(agent_id="<id>", messages=[\n        {\n            "role": "USER",\n        },\n    ])\n    # Handle response\n    print(res)', 'go_code_sample': 'package main\nimport(\n\t"context"\n\t"os"\n\tapiclientgo "github.com/gleanwork/api-client-go"\n\t"github.com/gleanwork/api-client-go/models/components"\n\t"log"\n)\nfunc main() {\n    ctx := context.Background()\n    s := apiclientgo.New(\n        apiclientgo.WithSecurity(os.Getenv("GLEAN_API_TOKEN")),\n        apiclientgo.WithInstance(os.Getenv("GLEAN_INSTANCE")),\n    )\n    res, err := s.Client.Agents.Run(ctx, components.AgentRunCreate{\n        AgentID: "<id>",\n        Messages: []components.Message{\n            components.Message{\n                Role: apiclientgo.String("USER"),\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.AgentRunWaitResponse != nil {\n        // handle response\n    }\n}', 'java_code_sample': 'package hello.world;\nimport java.lang.Exception;\nimport java.util.List;\nimport org.openapis.openapi.Glean;\nimport org.openapis.openapi.models.components.AgentRunCreate;\nimport org.openapis.openapi.models.components.Message;\nimport org.openapis.openapi.models.operations.CreateAndWaitRunResponse;\npublic class Application {\n    public static void main(String[] args) throws Exception {\n        Glean sdk = Glean.builder()\n                .apiToken(System.getenv().getOrDefault("GLEAN_API_TOKEN", ""))\n            .build();\n        AgentRunCreate req = AgentRunCreate.builder()\n                .agentId("<id>")\n                .messages(List.of(\n                    Message.builder()\n                        .role("USER")\n                        .build()))\n                .build();\n        CreateAndWaitRunResponse res = sdk.client().agents().run()\n                .request(req)\n                .call();\n        if (res.agentRunWaitResponse().isPresent()) {\n            // handle response\n        }\n    }\n}', 'typescript_code_sample': 'import { Glean } from "@gleanwork/api-client";\nconst glean = new Glean({\n  apiToken: process.env["GLEAN_API_TOKEN"] ?? "",\n  instance: process.env["GLEAN_INSTANCE"] ?? "",\n});\nasync function run() {\n  const result = await glean.client.agents.run({\n    agentId: "<id>",\n    messages: [\n      {\n        role: "USER",\n      },\n    ],\n  });\n  // Handle the result\n  console.log(result);\n}\nrun();', 'curl_code_sample': 'curl -L \'https://instance-name-be.glean.com/rest/api/v1/agents/runs/wait\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Accept: application/json\' \\\n-H \'Authorization: Bearer <token>\' \\\n-d \'{\n  "agent_id": "string",\n  "input": {},\n  "messages": [\n    {\n      "role": "USER",\n      "content": [\n        {\n          "text": "string",\n          "type": "text"\n        }\n      ]\n    }\n  ],\n  "metadata": {}\n}\''}
Enhanced content written to /Users/aureliawang/workspace/glean-developer-site-revamp/build/llms-full-enhanced.txt
